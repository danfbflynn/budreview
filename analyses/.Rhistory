x.dailyclim$Tmin<-x.dailyclim$Tmin+2
x.dailyclim$Tmax<-x.dailyclim$Tmax+2
x.all<-join(x,x.dailyclim)
}
#for studies with forcing that warms 5 degrees above ambient:
if(x$forcetemp=="ambient+5"){
x.dailyclim$Tmin<-x.dailyclim$Tmin+5
x.dailyclim$Tmax<-x.dailyclim$Tmax+5
x.all<-join(x,x.dailyclim)
}
#for studies with forcing that warms 6 degrees above ambient:
if(x$forcetemp=="ambient+6"){
x.dailyclim$Tmin<-x.dailyclim$Tmin+6
x.dailyclim$Tmax<-x.dailyclim$Tmax+6
x.all<-join(x,x.dailyclim)
} #if there is other experimental forcing,  add it using the forcetemp, field sample date and response.time columns
if(x$forcetemp_night =="ambient"){#one study (Sanz-Perez09) has ambient conditions at night but not during the day
x.dailyclim$Tmin<-x.dailyclim$Tmin
forcetmax<-x$forcetemp
daystobb<-round(as.numeric(x$response.time), digits=0)
forcedays<-dim(x.dailyclim[as.Date(x.dailyclim$Date)>as.Date(x.dailyclim$fieldsample.date2),])[1]##number of days of that should be replaced with the forcing treatment- this is the nubmer of rows after the field sample date because all of these should be replaced with forcing data number of days after field sample date-
if (!is.na(x$photoperiod_day)){
if(x$photoperiod_day !="ambient") {forcephoto<-x$photoperiod_day}
}
x.dailyclim$Tmax[as.Date(x.dailyclim$Date)>as.Date(x.dailyclim$fieldsample.date2)]<-rep(forcetmax, times=forcedays)
}
if(substr(x$forcetemp,1,7)!="ambient" & x$forcetemp!="" & x$forcetemp!="meandaily" & x$forcetemp_night!="ambient"){
forcetmax<-x$forcetemp
if(x$forcetemp_night==""){
forcetmin<-x$forcetemp
} else if(x$forcetemp_night=="10 then decreased 1.1C every two days until -13°C"){
forcetmin<- -13
} else if (x$forcetemp_night=="2 for 2 weeks"){
forcetmin<-2
} else forcetmin<-x$forcetemp_night
daystobb<-round(as.numeric(x$response.time), digits=0)
forcedays<-dim(x.dailyclim[as.Date(x.dailyclim$Date)>as.Date(x.dailyclim$fieldsample.date2),])[1]##number of days of that should be replaced with the forcing treatment- this is the nubmer of rows after the field sample date because all of these should be replaced with forcing data number of days after field sample date-
if (!is.na(x$photoperiod_day)){
if (x$photoperiod_day !="ambient"){forcephoto<-x$photoperiod_day}
}
#Replace tmin and tmax from ambient climate when Date >fieldsample.date2 with experimentalforcing climate
x.dailyclim$Tmin[as.Date(x.dailyclim$Date)>as.Date(x.dailyclim$fieldsample.date2)]<-rep(forcetmin, times=forcedays)
if(x$forcetemp_night=="2 for 2 weeks"){#for trial 4 of schnabel87: "#after 2 weeks,temp was decreased to -1C for 5 d, then -5C for 5d
x.dailyclim$Tmin[as.Date(x.dailyclim$Date)>(as.Date(x.dailyclim$fieldsample.date2)+14) & as.Date(x.dailyclim$Date)<(as.Date(x.dailyclim$fieldsample.date2)+20)]<-"-1"
x.dailyclim$Tmin[as.Date(x.dailyclim$Date)>(as.Date(x.dailyclim$fieldsample.date2)+19) & as.Date(x.dailyclim$Date)<(as.Date(x.dailyclim$fieldsample.date2)+25)]<-"-5"
}
if(x$forcetemp_night=="10 then decreased 1.1C every two days until -13°C"){#for trial 1 of schnabel87:
tmins<-sort(c(seq(from=10, to=-13,by=-1.1),seq(from=10, to=-13,by=-1.1)), decreasing=TRUE)
x.dailyclim$Tmin[as.Date(x.dailyclim$Date)>(as.Date(x.dailyclim$fieldsample.date2)) & as.Date(x.dailyclim$Date)<(as.Date(x.dailyclim$fieldsample.date2)+1+length(tmins))]<-tmins
}
x.dailyclim$Tmax[as.Date(x.dailyclim$Date)>as.Date(x.dailyclim$fieldsample.date2)]<-rep(forcetmax, times=forcedays)
if (!is.na(x$photoperiod_day)){
if(x$photoperiod_day !="ambient"){x.dailyclim$daylength[as.Date(x.dailyclim$Date)>as.Date(x.dailyclim$fieldsample.date2)]<-rep(forcephoto, times=forcedays)}
if(x$photoperiod_day=="13-9.5"){#for trial 4 of schnabel87
forcephotos1<-c(seq(from=13, to=9.5,by=-.25),seq(from=13, to=9.5,by=-.25))
forcephotos<-c(sort(forcephotos1, decreasing=TRUE),rep(9.5, times=forcedays-length(forcephotos1)))
x.dailyclim$daylength[as.Date(x.dailyclim$Date)>as.Date(x.dailyclim$fieldsample.date2)]<-forcephotos
}
if(x$photoperiod_day=="14-9.5"){#for trial 2 of schnabel87
forcephotos1<-c(seq(from=14, to=9.5,by=-.25),seq(from=14, to=9.5,by=-.25))
forcephotos<-c(sort(forcephotos1, decreasing=TRUE),rep(9.5, times=forcedays-length(forcephotos1)))
x.dailyclim$daylength[as.Date(x.dailyclim$Date)>as.Date(x.dailyclim$fieldsample.date2)]<-forcephotos
}
}
x.all<-join(x,x.dailyclim)#end of work on studies with no experimental chilling
}
#If there is experimental chilling
} else if(!is.na(as.numeric(x$chilltemp))){#if the chilltemp is a single number, then use a combination of the ambient climate data and the experimental chilling data
x.ambclim<-daily_ambtemp[daily_ambtemp$datasetID==x$datasetID & daily_ambtemp$fieldsample.date2==x$fieldsample.date2 & daily_ambtemp$lat==x$lat & daily_ambtemp$long==x$long,]
#select experimental chilling climate data
x.expclim<-daily_chilltemp3[daily_chilltemp3$datasetID==x$datasetID & daily_chilltemp3$ID_exptreat2==x$ID_exptreat2 & daily_chilltemp3$fieldsample.date2==x$fieldsample.date2 & daily_chilltemp3$lat==x$lat & daily_chilltemp3$long==x$long,]
firstchilldate<-min(as.Date(x.expclim$Date))
lastchilldate<-unique(x.expclim$lastchilldate)
if(max(as.Date(x.ambclim$Date))==as.Date(firstchilldate)-1){#if last date of ambient climate data is right before first date of chilling climate data, then just add chilling and forcing data below it
#make columns match ambient and expclim by removing ID_exptreat2 column
x.expclim<-x.expclim[,-which(colnames(x.expclim)=="ID_exptreat2")]
x.expclim<-x.expclim[,-which(colnames(x.expclim)=="lastchilldate")]
x.expclim$Date<-as.Date(x.expclim$Date)
x.ambclim$Date<-as.Date(x.ambclim$Date)
x.allclim<-rbind(x.ambclim,x.expclim)
x.allclim<-x.allclim[order(x.allclim$Date),]
#now add forcing
if(substr(x$forcetemp,1,7)!="ambient" & x$forcetemp!=""& x$forcetemp!="meandaily"& x$forcetemp_night!="ambient"){
forcetmax<-x$forcetemp
if(x$forcetemp_night==""){
forcetmin<-x$forcetemp
} else forcetmin<-x$forcetemp_night
daystobb<-round(as.numeric(x$response.time), digits=0)
forcedays<-dim(x.dailyclim[as.Date(x.dailyclim$Date)>as.Date(x.dailyclim$fieldsample.date2),])[1]##number of days of that should be replaced with the forcing treatment- this is the nubmer of rows after the field sample date because all of these should be replaced with forcing data number of days after field sample date-
if (!is.na(x$photoperiod_day)){
if(x$photoperiod_day !="ambient") {forcephoto<-x$photoperiod_day}
#Replace rows from ambient climate when Date >fieldsample.date2 with experimentalforcing climate
x.dailyclim$Tmin[as.Date(x.dailyclim$Date)>as.Date(x.dailyclim$fieldsample.date2)]<-rep(forcetmin, times=forcedays)
x.dailyclim$Tmax[as.Date(x.dailyclim$Date)>as.Date(x.dailyclim$fieldsample.date2)]<-rep(forcetmax, times=forcedays)
if(x$photoperiod_day !="ambient"){
x.dailyclim$daylength[as.Date(x.dailyclim$Date)>as.Date(x.dailyclim$fieldsample.date2)]<-rep(forcephoto, times=forcedays)}
}
x.all<-join(x,x.dailyclim)
}
} else if (!is.na(firstchilldate) & max(as.Date(x.ambclim$Date))>as.Date(firstchilldate)-1){#if ambient data goes beyond experimental chilling data (which it should once the climate pulling code is correct)
x.dailyclim<-x.ambclim#ambient climate data,
#Replace tmin and tmax columns with experimental climate when Date >fieldsample.date2 and when Date <lastchilldate with experimental chilling climate
x.dailyclim$Tmin[as.Date(x.dailyclim$Date) > as.Date(x.dailyclim$fieldsample.date2) & as.Date(x.dailyclim$Date) < as.Date(lastchilldate)]<-x.expclim$Tmin
x.dailyclim$Tmax[as.Date(x.dailyclim$Date) > as.Date(x.dailyclim$fieldsample.date2) & as.Date(x.dailyclim$Date) < as.Date(lastchilldate)]<-x.expclim$Tmax
#warning message, but its ok
if (!is.na(x$photoperiod_day)){
if(x$photoperiod_day !="ambient"){x.dailyclim$daylength[as.Date(x.dailyclim$Date)>as.Date(x.dailyclim$fieldsample.date2)]<-x.expclim$daylength}
}
#now add forcing
if(substr(x$forcetemp,1,7)!="ambient" & x$forcetemp!="" & x$forcetemp!="meandaily"& x$forcetemp_night !="ambient"){
forcetmax<-x$forcetemp
if(x$forcetemp_night==""){
forcetmin<-x$forcetemp
} else forcetmin<-x$forcetemp_night
daystobb<-round(as.numeric(x$response.time), digits=0)
forcedays<-dim(x.dailyclim[as.Date(x.dailyclim$Date)>as.Date(x.dailyclim$fieldsample.date2),])[1]##number of days of that should be replaced with the forcing treatment- this is the nubmer of rows after the field sample date because all of these should be replaced with forcing data number of days after field sample date-
if (!is.na(x$photoperiod_day)){
if(x$photoperiod_day !="ambient") {forcephoto<-x$photoperiod_day}
}
#Replace rows from ambient climate when Date >lastchilldate with experimentalforcing climate
x.dailyclim$Tmin[as.Date(x.dailyclim$Date)>as.Date(lastchilldate)]<-rep(forcetmin, times=forcedays)
x.dailyclim$Tmax[as.Date(x.dailyclim$Date)>as.Date(lastchilldate)]<-rep(forcetmax, times=forcedays)
if (!is.na(x$photoperiod_day)){
if(x$photoperiod_day !="ambient"){x.dailyclim$daylength[as.Date(x.dailyclim$Date)>as.Date(lastchilldate)]<-rep(forcephoto, times=forcedays)}
}
}
x.all<-join(x,x.dailyclim)
}
}#end of work on studies with experimental chilling
#Replace rows from ambient climate when Date >lastchilldate with experimentalforcing climate
x.dailyclim$Tmin[as.Date(x.dailyclim$Date)>as.Date(lastchilldate)]<-rep(forcetmin, times=forcedays)
forcetmax
!is.na(as.numeric(x$chilltemp))
x$chilltemp==""|x$chilltemp=="ambient"|x$chilldays==0
x$chilltemp
x.dailyclim<-daily_ambtemp[daily_ambtemp$datasetID==x$datasetID & daily_ambtemp$fieldsample.date2==x$fieldsample.date2 & daily_ambtemp$lat==x$lat & daily_ambtemp$long==x$long,]
x.dailyclim
daily_ambtemp[daily_ambtemp$datasetID==x$datasetID & daily_ambtemp$fieldsample.date2==x$fieldsample.date2 & daily_ambtemp$lat==x$lat & daily_ambtemp$long==x$long,]
daily_ambtemp$datasetID==x$datasetID
which(daily_ambtemp$datasetID==x$datasetID)
which(daily_ambtemp$datasetID==x$datasetID & daily_ambtemp$fieldsample.date2==x$fieldsample.date2)
which(daily_ambtemp$datasetID==x$datasetID & daily_ambtemp$fieldsample.date2==x$fieldsample.date2 & daily_ambtemp$lat==x$lat)
x$lat
x<-dat.bb[i,]#focal budburst event
colnames(x)[9:10]<-c("lat","long")#match column names to climate data column names
x$lat<-round(x$lat, digits=5)
x$la
x$lat
x<-dat.bb[i,]#focal budburst event
colnames(x)[9:10]<-c("lat","long")#match column names to climate data column names
x$lat
x
#For part 1b, we need to modify the climate data so that it switches from field
#(ambient) conditions currently in cdat to experimental chilling conditions after the field sampling date.
#First look to see how many studies have experimental climate (either/both chilling (chilltemp, chilldays, chillphotoperiod) and forcing (forctemp)):
dat$ID_exptreat2<-paste(dat$datasetID,dat$provenance.lat,dat$provenance.long,dat$chilltemp,dat$chilldays,dat$chillphotoperiod,dat$forcetemp,dat$forcetemp_night,sep=".")
unique(dat$ID_exptreat2[dat$datasetID=="sanzperez10"])
unique(dat$ID_exptreat2[dat$datasetID=="sanzperez10"])
unique(dat$growing.lat[dat$datasetID=="sanzperez10"])
colnames(dat)
unique(dater$growing.lat[dat$datasetID=="sanzperez10"])
unique(dater.all$growing.lat[dat$datasetID=="sanzperez10"])
unique(dater$growing.lat[dat$datasetID=="sanzperez10"])
colnames(dater)
#dater <- subset(dater.all, select=common.cols)
dater<-dater.all
#Format budburst data
# and format the dates ...
dater$date <- as.Date(dater$fieldsample.date2, format="%Y-%m-%d")
dater$sample.year <- as.numeric(format(dater$date , "%Y"))
dater$month <- as.numeric(format(dater$date , "%m"))
# okay, we only want to work with phenology data for which we have climate data ...
dat <- dater[which(dater$datasetID %in% unique(cdater$datasetID)),]
# Back to the phenology data ...
# We need exp ID and field sample date.
# need to fix year ...
# rule for now: if field sample date < August, then use year + 1, otherwise use year ...
#subset(dat, is.na(month)==TRUE) # WTF
dat <- subset(dat, is.na(month)==FALSE)
dat$year <- dat$sample.year
dat$year[dat$month>8] <- dat$sample.year[dat$month>8]+1
dat$year[dat$month<8] <- dat$sample.year[dat$month<8]
dat$uniqueID <- paste(dat$datasetID, dat$fieldsample.date2, dat$forcetemp, dat$chilltemp, dat$chilldays,dat$chillphotoperiod,dat$photoperiod_day)
#For part 1b, we need to modify the climate data so that it switches from field
#(ambient) conditions currently in cdat to experimental chilling conditions after the field sampling date.
#First look to see how many studies have experimental climate (either/both chilling (chilltemp, chilldays, chillphotoperiod) and forcing (forctemp)):
dat$ID_exptreat2<-paste(dat$datasetID,dat$provenance.lat,dat$provenance.long,dat$chilltemp,dat$chilldays,dat$chillphotoperiod,dat$forcetemp,dat$forcetemp_night,sep=".")
#noexpchilldat<-dat[which(dat$chilltemp==""|dat$chilltemp=="ambient"),]#studies that do NOT need experimental chilling calculated
#noexpclimdat<-noexpchilldat[which(noexpchilldat$forcetemp==""|noexpchilldat$forcetemp=="ambient"|noexpchilldat$forcetemp=="meandaily"),]#studies that do NOT need experimental chilling AND ALSO do not need experimental forcing calculated
#unique(noexpclimdat$photoperiod_day)#some studies manipulate ONLY photoperiod- ignore these for now
expclimdat<-dat[-which(dat$chilltemp=="" & dat$forcetemp==""),]#156 rows removed
#dim(expclimdat)#7992   rows
#which(expclimdat$chilltemp=="ambient" & expclimdat$forcetemp=="")#no rows
#which(expclimdat$chilltemp=="ambient" & expclimdat$forcetemp=="ambient")#no rows
expclimdat<-expclimdat[-which(expclimdat$chilltemp=="" & expclimdat$forcetemp=="ambient"),]#
#dim(expclimdat)#7583   rows
expclimstudies<-sort(unique(expclimdat$datasetID))#list of studies that do manipulate chilling and/or forcing:50 studies
expclimstudies
expclimtreats<-sort(unique(expclimdat$ID_exptreat2))#list of all study-chilling&forcing treatment combinations: 806
expclimtreats
colnames(dat)
#For part 1b, we need to modify the climate data so that it switches from field
#(ambient) conditions currently in cdat to experimental chilling conditions after the field sampling date.
#First look to see how many studies have experimental climate (either/both chilling (chilltemp, chilldays, chillphotoperiod) and forcing (forctemp)):
dat$ID_exptreat2<-paste(dat$datasetID,dat$chil.lat,dat$chill.long,dat$chilltemp,dat$chilldays,dat$chillphotoperiod,dat$forcetemp,dat$forcetemp_night,sep=".")
#noexpchilldat<-dat[which(dat$chilltemp==""|dat$chilltemp=="ambient"),]#studies that do NOT need experimental chilling calculated
#noexpclimdat<-noexpchilldat[which(noexpchilldat$forcetemp==""|noexpchilldat$forcetemp=="ambient"|noexpchilldat$forcetemp=="meandaily"),]#studies that do NOT need experimental chilling AND ALSO do not need experimental forcing calculated
#unique(noexpclimdat$photoperiod_day)#some studies manipulate ONLY photoperiod- ignore these for now
expclimdat<-dat[-which(dat$chilltemp=="" & dat$forcetemp==""),]#156 rows removed
#dim(expclimdat)#7992   rows
#which(expclimdat$chilltemp=="ambient" & expclimdat$forcetemp=="")#no rows
#which(expclimdat$chilltemp=="ambient" & expclimdat$forcetemp=="ambient")#no rows
expclimdat<-expclimdat[-which(expclimdat$chilltemp=="" & expclimdat$forcetemp=="ambient"),]#
#dim(expclimdat)#7583   rows
expclimstudies<-sort(unique(expclimdat$datasetID))#list of studies that do manipulate chilling and/or forcing:50 studies
expclimtreats<-sort(unique(expclimdat$ID_exptreat2))#list of all study-chilling&forcing treatment combinations: 806
expclimstudies
expclimtreats<-sort(unique(expclimdat$ID_exptreat2))#list of all study-chilling&forcing treatment combinations: 806
length(expclimtreats)
#For part 1b, we need to modify the climate data so that it switches from field
#(ambient) conditions currently in cdat to experimental chilling conditions after the field sampling date.
#First look to see how many studies have experimental climate (either/both chilling (chilltemp, chilldays, chillphotoperiod) and forcing (forctemp)):
dat$ID_exptreat2<-paste(dat$datasetID,dat$provenance.lat,dat$provenance.long,dat$chilltemp,dat$chilldays,dat$chillphotoperiod,dat$forcetemp,dat$forcetemp_night,sep=".")
#noexpchilldat<-dat[which(dat$chilltemp==""|dat$chilltemp=="ambient"),]#studies that do NOT need experimental chilling calculated
#noexpclimdat<-noexpchilldat[which(noexpchilldat$forcetemp==""|noexpchilldat$forcetemp=="ambient"|noexpchilldat$forcetemp=="meandaily"),]#studies that do NOT need experimental chilling AND ALSO do not need experimental forcing calculated
#unique(noexpclimdat$photoperiod_day)#some studies manipulate ONLY photoperiod- ignore these for now
expclimdat<-dat[-which(dat$chilltemp=="" & dat$forcetemp==""),]#156 rows removed
#dim(expclimdat)#7992   rows
#which(expclimdat$chilltemp=="ambient" & expclimdat$forcetemp=="")#no rows
#which(expclimdat$chilltemp=="ambient" & expclimdat$forcetemp=="ambient")#no rows
expclimdat<-expclimdat[-which(expclimdat$chilltemp=="" & expclimdat$forcetemp=="ambient"),]#
#dim(expclimdat)#7583   rows
expclimstudies<-sort(unique(expclimdat$datasetID))#list of studies that do manipulate chilling and/or forcing:50 studies
expclimtreats<-sort(unique(expclimdat$ID_exptreat2))#list of all study-chilling&forcing treatment combinations: 806
noexpclimstudies<-unique(noexpclimdat$datasetID)[is.na(match(unique(noexpclimdat$datasetID),expclimstudies))]#studies that do no experimental climate or photoperiod manipulation: only 3 ("ashby62"   "hawkins12" "sanzperez10")
#For studies that do experimental chilling, fill in the experimental climate data and dates
#Things the below code does not yet deal with:
#1.multiple values for chilling treatments in a single row (e.g. "-4, 0, 4","-4, 8, 8","0, 4, 8", "-3,2")
#2.studies that manipulate ONLY photoperiod
daily_chilltemp<-data.frame()
for (i in 1:length(expclimtreats)){
tempdat<-dat[dat$ID_exptreat2==expclimtreats[i],]
startdate<-unique(tempdat$fieldsample.date2)
for(j in 1:length(startdate)){
tempdat2<-tempdat[tempdat$fieldsample.date2==startdate[j],]
datasetID<-unique(tempdat2$datasetID)
ID_exptreat2<-unique(tempdat2$ID_exptreat2)
chilltemp<-unique(tempdat2$chilltemp)
chilldays<-unique(tempdat2$chilldays)
chillphoto<-unique(tempdat2$chillphotoperiod)
chilllat<-unique(tempdat2$provenance.lat)
chilllong<-unique(tempdat2$provenance.long)
chilluniqueID<-unique(tempdat2$uniqueID)
if(chilltemp==""|chilltemp=="ambient"){next}
#in this case, there is no experimental chilling, so we
#skip ahead to the next treatment. there may still be experimental forcing but we will calculate this in the monster loop below
if(chilldays==""){next}
enddate<-as.Date(startdate[j])+as.numeric(chilldays)-1
if(as.Date(startdate[j])>as.Date(enddate)){enddate<-startdate[j]}
if(as.Date(startdate[j])==as.Date(enddate)){next}
for(k in 1:length(chilluniqueID)){
tempdat3<-tempdat2[tempdat2$chilluniqueID==chilluniqueID[k],]
aa<-data.frame(matrix(, nrow=as.numeric(chilldays),ncol=0))
aa$datasetID<-rep(datasetID, times=chilldays)
aa$ID_exptreat2<-rep(ID_exptreat2, times=chilldays)
aa$fieldsample.date2<-rep(startdate[j],times=chilldays)
aa$date<-seq(as.Date(startdate[j]),as.Date(enddate), by=1)
aa$tmin<-rep(chilltemp, times=chilldays)
aa$tmax<-rep(chilltemp, times=chilldays)
aa$daylength<-rep(chillphoto, times=chilldays)
aa$lastchilldate<-max(aa$date)#last date that chilling treatment occurred- this will be useful for calculating forcing later
aa$lat<-rep(chilllat, times=chilldays)
aa$long<-rep(chilllong, times=chilldays)
aa$uniqueID<-rep(chilluniqueID[k], times=chilldays)
daily_chilltemp<-rbind(daily_chilltemp,aa)
}
}
}
daily_chilltemp3<-dplyr::select(daily_chilltemp, datasetID, ID_exptreat2,uniqueID,lat,long,fieldsample.date2,date,tmin,tmax,daylength,lastchilldate)
colnames(daily_chilltemp3)<-c("datasetID","ID_exptreat2","uniqueID","lat","long","fieldsample.date2","Date","Tmin","Tmax","daylength","lastchilldate")
daily_chilltemp3$Date<-as.Date(daily_chilltemp3$Date)
#save this daily chilling climate file, since it has a column for the last chilldate for each study combination
#Nacho needs this for calculating growing degree days
write.csv(daily_chilltemp3,"output/dailyclim/daily_expchill.csv", row.names=FALSE)
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
# Set working directory:
if(length(grep("Lizzie", getwd())>0)) {setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses")
} else if
(length(grep("ailene", getwd()))>0) {setwd("/Users/aileneettinger/git/ospree/analyses")
}else
setwd("~/Documents/git/ospree/analyses")
# Load libraries
library(dplyr)
library(tidyr)
library(plyr)
library(geosphere)
# sourcing
source("source/commoncols.R")
# Get the data, only work with BB data!
dater.all <- read.csv("output/ospree_clean_withchill.csv", header=TRUE)
#dater <- subset(dater.all, select=common.cols)
dater<-dater.all
cdater <- read.csv("output/dailyclim/dailytemp.csv", header=TRUE)
#1a. Format the ospree phenology datafile so that it can be connected to the climate data
source("bb_dailyclimate/source/bb_daily_dataprep_format_bbdat.R")
#1b. Format the ambient daily climate data (pulled in pulldailyclim.R)
source("bb_dailyclimate/source/bb_daily_dataprep_format_climdat.R")
#1c. Create files with experimental chilling and photoperiod conditions.
source("bb_dailyclimate/source/bb_daily_dataprep_get_expclimdat.R")
#2. Make monster daily climate file with daily data for each budburst event date.
#The below loop takes a while....
#I'm not sure if it deals with the following:
#A.  multiple values for forcing treatments (e.g. "mean of 9, 12, 15","7-27.5")
#B. studies that manipulate ONLY photoperiod
#First, select out budburst data
dat.bb<-dat[dat$respvar.simple=="percentbudburst"|dat$respvar.simple=="daystobudburst",]
dat.bb<-dat.bb[-which(dat.bb$response.time=="no response"),]#i think this is ok to do...
dim(dat.bb)[1]
i=423
print(i)
x<-dat.bb[i,]#focal budburst event
x
colnames(x)[9:10]<-c("lat","long")#match column names to climate data column names
x$lat<-round(x$lat, digits=5)
x$long<-round(x$long, digits=4)
x
colnames(x)[9:10]<-c("lat","long")#match column names to climate data column names
x$lat<-round(x$lat, digits=5)
x<-dat.bb[i,]#focal budburst event
colnames(x)[9:10]<-c("lat","long")#match column names to climate data column names
x$lat
x$long
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
# Set working directory:
if(length(grep("Lizzie", getwd())>0)) { setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses")
} else if
(length(grep("Ignacio", getwd()))>0) { setwd("~/GitHub/ospree/analyses")
} else if
(length(grep("ailene", getwd()))>0) {setwd("/Users/aileneettinger/git/ospree/analyses")
} else
setwd("~/Documents/git/ospree/analyses")
# Load libraries
library(dplyr)
library(tidyr)
# 1. Get the data
d <- read.csv("input/ospree.csv")
# 2. Need to deal with some basic cleaning, delete a few extraneous columns
d$X <- NULL
d$X.1 <- NULL
d$X.2 <- NULL
d$X.3 <- NULL
# 3. Clean up some super miscellaneous stuff
source("cleaning/clean_misc.R")
# 4. Clean up response variable names
source("cleaning/clean_respvar.R")
# 5. Clean up photoperiod #
source("cleaning/clean_photo.R")
# 6. Clean up forcetemp
source("cleaning/clean_forcetemp.R")
# 7. Get rid of non-woodys and clean species names
source("cleaning/clean_woody_sps.R")
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
# Set working directory:
if(length(grep("Lizzie", getwd())>0)) { setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses")
} else if
(length(grep("Ignacio", getwd()))>0) { setwd("~/GitHub/ospree/analyses")
} else if
(length(grep("ailene", getwd()))>0) {setwd("/Users/aileneettinger/git/ospree/analyses")
} else
setwd("~/Documents/git/ospree/analyses")
# Load libraries
library(dplyr)
library(tidyr)
# 1. Get the data
d <- read.csv("input/ospree.csv")
# 2. Need to deal with some basic cleaning, delete a few extraneous columns
d$X <- NULL
d$X.1 <- NULL
d$X.2 <- NULL
d$X.3 <- NULL
# 3. Clean up some super miscellaneous stuff
source("cleaning/clean_misc.R")
# 4. Clean up response variable names
source("cleaning/clean_respvar.R")
# 5. Clean up photoperiod #
source("cleaning/clean_photo.R")
# 6. Clean up forcetemp
source("cleaning/clean_forcetemp.R")
# 7. Get rid of non-woodys and clean species names
source("cleaning/clean_woody_sps.R")
# 8. Clean response and response time columns.
source("cleaning/clean_responsetime.R")
# 9. Clean the lat/long (growing and provenance)
source("cleaning/clean_latlong.R")
source("cleaning/clean_duplicates.R")
write.csv(d, "output/ospree_clean.csv", row.names=FALSE)
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
# Set working directory:
if(length(grep("Lizzie", getwd())>0)) { setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses")
} else if
(length(grep("Ignacio", getwd()))>0) { setwd("~/GitHub/ospree/analyses")
} else if
(length(grep("ailene", getwd()))>0) {setwd("/Users/aileneettinger/git/ospree/analyses")
} else
setwd("~/Documents/git/ospree/analyses")
# Load libraries
library(dplyr)
library(tidyr)
# 1. Get the data
d <- read.csv("input/ospree.csv")
# 2. Need to deal with some basic cleaning, delete a few extraneous columns
d$X <- NULL
d$X.1 <- NULL
d$X.2 <- NULL
d$X.3 <- NULL
# 3. Clean up some super miscellaneous stuff
source("cleaning/clean_misc.R")
# 4. Clean up response variable names
source("cleaning/clean_respvar.R")
# 5. Clean up photoperiod #
source("cleaning/clean_photo.R")
# 6. Clean up forcetemp
source("cleaning/clean_forcetemp.R")
# 7. Get rid of non-woodys and clean species names
source("cleaning/clean_woody_sps.R")
# 8. Clean response and response time columns.
source("cleaning/clean_responsetime.R")
# 9. Clean the lat/long (growing and provenance)
source("cleaning/clean_latlong.R")
source("cleaning/clean_duplicates.R")
write.csv(d, "output/ospree_clean.csv", row.names=FALSE)
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
# Set working directory:
if(length(grep("Lizzie", getwd())>0)) {setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses")
} else if
(length(grep("ailene", getwd()))>0) {setwd("/Users/aileneettinger/git/ospree/analyses")
}else
setwd("~/Documents/git/ospree/analyses")
# Load libraries
library(dplyr)
library(tidyr)
library(plyr)
library(ncdf4)
library(Interpol.T)
library(chillR)
# 1. Get the data
d <- read.csv("output/ospree_clean.csv")
source("chilling/cleaning_chilltemp.R")
# 4a: summarize lat/longs needed to pull climate data from europe and north america
source("chilling/fieldchillcalc_latlong.R")
climatedrive = "/Volumes/climate" #Ailene's climate data drive
# 4c. pull climate data from europe
source("chilling/pullclimate_eur.R")
# 4d: pull climate data from north america
#tempval <- list() #required to just pull nam climate
source("chilling/pullclimate_nam.R")
# 4e: Interpolate hourly temperatures from the daily values
# & chilling using three different metrics
#(If you want to avoid connecting to the external hard drive, then start here)
#load this .RData workspace)
#load("output/fieldclimate.RData")
source("chilling/interpolclimate.R")
source("chilling/totalchillcalc.R")
write.csv(dat4, "output/ospree_clean_withchill.csv", row.names=FALSE) ##
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
# Set working directory:
if(length(grep("Lizzie", getwd())>0)) { setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses")
} else if
(length(grep("Ignacio", getwd()))>0) { setwd("~/GitHub/ospree/analyses")
} else if
(length(grep("ailene", getwd()))>0) {setwd("/Users/aileneettinger/git/ospree/analyses")
} else
setwd("~/Documents/git/ospree/analyses")
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
# Set working directory:
if(length(grep("Lizzie", getwd())>0)) {setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses")
} else if
(length(grep("ailene", getwd()))>0) {setwd("/Users/aileneettinger/git/ospree/analyses")
}else
setwd("~/Documents/git/ospree/analyses")
# Load libraries
library(dplyr)
library(tidyr)
library(plyr)
library(geosphere)
# sourcing
source("source/commoncols.R")
# Get the data, only work with BB data!
dater.all <- read.csv("output/ospree_clean_withchill.csv", header=TRUE)
#dater <- subset(dater.all, select=common.cols)
dater<-dater.all
cdater <- read.csv("output/dailyclim/dailytemp.csv", header=TRUE)
#1a. Format the ospree phenology datafile so that it can be connected to the climate data
source("bb_dailyclimate/source/bb_daily_dataprep_format_bbdat.R")
#1b. Format the ambient daily climate data (pulled in pulldailyclim.R)
source("bb_dailyclimate/source/bb_daily_dataprep_format_climdat.R")
#1c. Create files with experimental chilling and photoperiod conditions.
source("bb_dailyclimate/source/bb_daily_dataprep_get_expclimdat.R")
