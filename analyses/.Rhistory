<<<<<<< Updated upstream
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme((legend.position="none"), labels=c("A","B")))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right"), labels = c("A","B")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right"), labels = c("A","B")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
labels = c("A", "B"),
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2, labels = c("A", "B"),
widths = c(2.8, 2.8), heights = 2.2)
plot_grid(plot1, plot2, labels=c("A", "B"), ncol = 2, nrow = 1)
install.packages("cowplot")
library(cowplot)
plot_grid(plot1, plot2, labels=c("A", "B"), ncol = 2, nrow = 1)
eur.map <- eur + geom_point(data = europe, aes(Longitude, Latitude, size=False.Springs, color=False.Springs)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs")  +
guides(size=FALSE)
plot2 <- eur.map
plot_grid(plot1, plot2, labels=c("A", "B"), ncol = 2, nrow = 1)
legend <- get_legend(eur.map)
eur.map <- eur.map + theme(legend.position="none")
grid.arrange(am.map, eur.map, legend, ncol=3, widths=c(2.3, 2.3, 0.8), labels = c("A", "B"))
grid.arrange(am.map, eur.map, legend, ncol=3, widths=c(2.8, 2.8, 0.8), labels = c("A", "B"))
grid.arrange(am.map, eur.map, legend, ncol=3, widths=c(2.8, 2.8, 0.8), labels = c("A", "B", ""))
grid.arrange(am.map, eur.map, legend, ncol=2, nrow = 2,
layout_matrix = rbind(c(1,2), c(3,3)),
widths = c(2.7, 2.7), heights = c(2.5, 0.2))
grid.arrange(am.map, eur.map, legend, ncol=3, widths=c(2.8, 2.8, 0.8))
plot_grid(plot1, plot2, labels=c("A", "B"), ncol = 2, nrow = 1)
plot_grid(plot1, eur.map, labels=c("A", "B"), ncol = 2, nrow = 1)
grid_arrange_shared_legend(plot1, plot2, ncol = 2, labels = c("A", "B"),
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
### The power of Sunny Delight
## Kids who drink sunny d at a young age are more likely to be happier adults
## In our example, if a child drinks 1 bottle of sunny d a week at the age of 5,
# then the amount of dopamine in the brain increases in adulthood.
## The average adult has 45+/-5 ng/ml of dopamine, but kids who drink sunny d
# increase that level to 55 ng/ml
## The first study tests 1000 kids
library(arm)
library(ggplot2)
library(gridExtra)
## What is the effect size in this example?
ES = (55-45)/5 ## ES = 2
SE = 5/(sqrt(10)) ## SE = 0.16
## What about when we triple the effect size?
ES = (75-45)/5 ## ES = 6
SE = 5/(sqrt(10)) ## SE stays the same
## How about when we triple the sample size?
ES = (55-45)/5 ## ES is 2 like before but...
SE = 5/(sqrt(30)) ## SE decreases slightly - SE = 0.09
### Andrew states that " it is generally better to double the effect size [theta] than to double the sample size [n]"
## here we can see that doubling the sample size decreases the standard error at a slower rate than doubling the effect size
# The SE: effect size influences the numerator, sample size influences the denominator
nsunny = 2
rep = 5
ntot = nsunny*rep
sunny = gl(nsunny, rep, length=ntot)
sunnydiff = 10
sunnydiff.sd = 0
suns<-rnorm(ntot, 55, 5)
base <- 45
child <- base + suns-mean(suns)
mm <- model.matrix(~(sunny)^2, data.frame=(sunny))
fake <- vector()
for (i in 1:length(ntot)){
coeff <- c(child[i],
rnorm(1, sunnydiff, sunnydiff.sd)
)
dp <- rnorm(n = length(sunny), mean = mm %*% coeff, sd = 5)
fake <- data.frame(dp=dp, sunny=sunny)
}
hist(fake$dp[sunny==1])
hist(fake$dp[sunny==2])
mean(fake$dp) # 50.5
sd(fake$dp) # 7.24
display(lm(dp~sunny, data=fake))
#lm(formula = dp ~ sunny, data = fake)
#coef.est coef.se
#(Intercept) 45.33     0.23
#sunny2      10.25     0.32
#---
#  n = 1000, k = 2
#residual sd = 5.11, R-Squared = 0.50
### Alright, now let's triple the effect size...
### Sunny D increases the level of dopamine to 75 ng/ml - we'll keep the sample size the same
nsunny.e = 2
rep.e = 5
ntot.e = nsunny.e*rep.e
sunny.e = gl(nsunny.e, rep.e, length=ntot.e)
sunnydiff.e = 30
sunnydiff.sd.e = 0
suns.e<-rnorm(ntot.e, 75, 5)
base.e <- 45
child.e <- base.e + suns.e-mean(suns.e)
mm.e <- model.matrix(~(sunny.e)^2, data.frame=(sunny.e))
fake.e <- vector()
for (i in 1:length(ntot.e)){
coeff.e <- c(child.e[i],
rnorm(1, sunnydiff.e, sunnydiff.sd.e)
)
dp.e <- rnorm(n = length(sunny.e), mean = mm.e %*% coeff.e, sd = 5)
fake.e <- data.frame(dp.e=dp.e, sunny.e=sunny.e)
}
hist(fake.e$dp.e[sunny.e==1])
hist(fake.e$dp.e[sunny.e==2])
mean(fake.e$dp.e) # 61.2
sd(fake.e$dp.e) # 15.9
display(lm(dp.e~sunny.e, data=fake.e))
#lm(formula = dp.e ~ sunny.e, data = fake.e)
#coef.est coef.se
#(Intercept) 46.04     0.22
#sunny.e2    30.24     0.31
#---
#  n = 1000, k = 2
#residual sd = 4.94, R-Squared = 0.90
## And now, we triple the sample size...
nsunny.s = 2
rep.s = 15
ntot.s = nsunny.s*rep.s
sunny.s = gl(nsunny.s, rep.s, length=ntot.s)
sunnydiff.s = 10
sunnydiff.sd.s = 0
suns.s<-rnorm(ntot.s, 55, 5)
base.s <- 45
child.s <- base.s + suns.s-mean(suns.s)
mm.s <- model.matrix(~(sunny.s)^2, data.frame=(sunny.s))
fake.s <- vector()
for (i in 1:length(ntot.s)){
coeff.s <- c(child.s[i],
rnorm(1, sunnydiff.s, sunnydiff.sd.s)
)
dp.s <- rnorm(n = length(sunny.s), mean = mm.s %*% coeff.s, sd = 5)
fake.s <- data.frame(dp.s=dp.s, sunny.s=sunny.s)
}
hist(fake.s$dp.s)
mean(fake.s$dp.s) # 52.8
sd(fake.s$dp.s) # 6.93
display(lm(dp.s~sunny.s, data=fake.s))
#lm(formula = dp.s ~ sunny.s, data = fake.s)
#coef.est coef.se
#(Intercept) 48.01     0.13
#sunny.s2     9.66     0.18
#---
#  n = 3000, k = 2
#residual sd = 4.97, R-Squared = 0.49
#### Let's plot the effects!
fake$sunny<-ifelse(fake$sunny==1, "control", "sunnyD")
base<- qplot(sunny, dp, data = fake, geom="boxplot", color=sunny) +
xlab("Sunny D consumption") + ylab("Dopamine levels (ng/ml)") + ylim(30,85)
fake.e$sunny.e<-ifelse(fake.e$sunny.e==1, "control", "sunnyD")
effect<- qplot(sunny.e, dp.e, data = fake.e, geom="boxplot", color=sunny.e) +
xlab("Sunny D consumption") + ylab("Dopamine levels (ng/ml)") + ylim(30,85)
fake.s$sunny.s<-ifelse(fake.s$sunny.s==1, "control", "sunnyD")
sample<- qplot(sunny.s, dp.s, data = fake.s, geom="boxplot", color=sunny.s) +
xlab("Sunny D consumption") + ylab("Dopamine levels (ng/ml)") + ylim(30,85)
grid.arrange(base, effect, sample, ncol=3, nrow=1)
fake$child<- as.numeric(sample(1000))
fake.e$child.e<-as.numeric(sample(1000))
fake.s$child.s<-as.numeric(sample(3000))
bg<-ggplot(fake, aes(x=child, y=dp)) + geom_point(aes(color=sunny)) + geom_smooth(method="lm")
#bh<-hist(fake$dp)
#grid.arrange(bg,bh, ncol=1, nrow=2)
eg<-ggplot(fake.e, aes(x=child.e, y=dp.e)) + geom_point(aes(color=sunny.e)) + geom_smooth(method="lm")
#eh<-hist(fake.e$dp.e)
#grid.arrange(eg,eh, ncol=1, nrow=2)
sg<-ggplot(fake.s, aes(x=child.s, y=dp.s)) + geom_point(aes(color=sunny.s)) + geom_smooth(method="lm")
#sh<-hist(fake.s$dp.s)
#grid.arrange(sg,sh, ncol=1, nrow=2)
grid.arrange(bg,eg,sg, ncol=3, nrow=1)
fake$child<- as.numeric(sample(10))
fake.e$child.e<-as.numeric(sample(10))
fake.s$child.s<-as.numeric(sample(30))
bg<-ggplot(fake, aes(x=child, y=dp)) + geom_point(aes(color=sunny)) + geom_smooth(method="lm")
eg<-ggplot(fake.e, aes(x=child.e, y=dp.e)) + geom_point(aes(color=sunny.e)) + geom_smooth(method="lm")
sg<-ggplot(fake.s, aes(x=child.s, y=dp.s)) + geom_point(aes(color=sunny.s)) + geom_smooth(method="lm")
grid.arrange(bg,eg,sg, ncol=3, nrow=1)
library(arm)
library(ggplot2)
library(gridExtra)
## What is the effect size in this example?
ES = (55-45)/5 ## ES = 2
SE = 5/(sqrt(100)) ## SE = 0.16
## What about when we triple the effect size?
ES = (75-45)/5 ## ES = 6
SE = 5/(sqrt(100)) ## SE stays the same
## How about when we triple the sample size?
ES = (55-45)/5 ## ES is 2 like before but...
SE = 5/(sqrt(300)) ## SE decreases slightly - SE = 0.09
### Andrew states that " it is generally better to double the effect size [theta] than to double the sample size [n]"
## here we can see that doubling the sample size decreases the standard error at a slower rate than doubling the effect size
# The SE: effect size influences the numerator, sample size influences the denominator
nsunny = 2
rep = 50
ntot = nsunny*rep
sunny = gl(nsunny, rep, length=ntot)
sunnydiff = 10
sunnydiff.sd = 0
suns<-rnorm(ntot, 55, 5)
base <- 45
child <- base + suns-mean(suns)
mm <- model.matrix(~(sunny)^2, data.frame=(sunny))
fake <- vector()
for (i in 1:length(ntot)){
coeff <- c(child[i],
rnorm(1, sunnydiff, sunnydiff.sd)
)
dp <- rnorm(n = length(sunny), mean = mm %*% coeff, sd = 5)
fake <- data.frame(dp=dp, sunny=sunny)
}
hist(fake$dp[sunny==1])
hist(fake$dp[sunny==2])
mean(fake$dp) # 50.5
sd(fake$dp) # 7.24
display(lm(dp~sunny, data=fake))
#lm(formula = dp ~ sunny, data = fake)
#coef.est coef.se
#(Intercept) 45.33     0.23
#sunny2      10.25     0.32
#---
#  n = 1000, k = 2
#residual sd = 5.11, R-Squared = 0.50
### Alright, now let's triple the effect size...
### Sunny D increases the level of dopamine to 75 ng/ml - we'll keep the sample size the same
nsunny.e = 2
rep.e = 50
ntot.e = nsunny.e*rep.e
sunny.e = gl(nsunny.e, rep.e, length=ntot.e)
sunnydiff.e = 30
sunnydiff.sd.e = 0
suns.e<-rnorm(ntot.e, 75, 5)
base.e <- 45
child.e <- base.e + suns.e-mean(suns.e)
mm.e <- model.matrix(~(sunny.e)^2, data.frame=(sunny.e))
fake.e <- vector()
for (i in 1:length(ntot.e)){
coeff.e <- c(child.e[i],
rnorm(1, sunnydiff.e, sunnydiff.sd.e)
)
dp.e <- rnorm(n = length(sunny.e), mean = mm.e %*% coeff.e, sd = 5)
fake.e <- data.frame(dp.e=dp.e, sunny.e=sunny.e)
}
hist(fake.e$dp.e[sunny.e==1])
hist(fake.e$dp.e[sunny.e==2])
mean(fake.e$dp.e) # 61.2
sd(fake.e$dp.e) # 15.9
display(lm(dp.e~sunny.e, data=fake.e))
#lm(formula = dp.e ~ sunny.e, data = fake.e)
#coef.est coef.se
#(Intercept) 46.04     0.22
#sunny.e2    30.24     0.31
#---
#  n = 1000, k = 2
#residual sd = 4.94, R-Squared = 0.90
## And now, we triple the sample size...
nsunny.s = 2
rep.s = 150
ntot.s = nsunny.s*rep.s
sunny.s = gl(nsunny.s, rep.s, length=ntot.s)
sunnydiff.s = 10
sunnydiff.sd.s = 0
suns.s<-rnorm(ntot.s, 55, 5)
base.s <- 45
child.s <- base.s + suns.s-mean(suns.s)
mm.s <- model.matrix(~(sunny.s)^2, data.frame=(sunny.s))
fake.s <- vector()
for (i in 1:length(ntot.s)){
coeff.s <- c(child.s[i],
rnorm(1, sunnydiff.s, sunnydiff.sd.s)
)
dp.s <- rnorm(n = length(sunny.s), mean = mm.s %*% coeff.s, sd = 5)
fake.s <- data.frame(dp.s=dp.s, sunny.s=sunny.s)
}
hist(fake.s$dp.s)
mean(fake.s$dp.s) # 52.8
sd(fake.s$dp.s) # 6.93
display(lm(dp.s~sunny.s, data=fake.s))
#lm(formula = dp.s ~ sunny.s, data = fake.s)
#coef.est coef.se
#(Intercept) 48.01     0.13
#sunny.s2     9.66     0.18
#---
#  n = 3000, k = 2
#residual sd = 4.97, R-Squared = 0.49
#### Let's plot the effects!
fake$sunny<-ifelse(fake$sunny==1, "control", "sunnyD")
base<- qplot(sunny, dp, data = fake, geom="boxplot", color=sunny) +
xlab("Sunny D consumption") + ylab("Dopamine levels (ng/ml)") + ylim(30,85)
fake.e$sunny.e<-ifelse(fake.e$sunny.e==1, "control", "sunnyD")
effect<- qplot(sunny.e, dp.e, data = fake.e, geom="boxplot", color=sunny.e) +
xlab("Sunny D consumption") + ylab("Dopamine levels (ng/ml)") + ylim(30,85)
fake.s$sunny.s<-ifelse(fake.s$sunny.s==1, "control", "sunnyD")
sample<- qplot(sunny.s, dp.s, data = fake.s, geom="boxplot", color=sunny.s) +
xlab("Sunny D consumption") + ylab("Dopamine levels (ng/ml)") + ylim(30,85)
grid.arrange(base, effect, sample, ncol=3, nrow=1)
fake$child<- as.numeric(sample(100))
fake.e$child.e<-as.numeric(sample(100))
fake.s$child.s<-as.numeric(sample(300))
bg<-ggplot(fake, aes(x=child, y=dp)) + geom_point(aes(color=sunny)) + geom_smooth(method="lm")
eg<-ggplot(fake.e, aes(x=child.e, y=dp.e)) + geom_point(aes(color=sunny.e)) + geom_smooth(method="lm")
sg<-ggplot(fake.s, aes(x=child.s, y=dp.s)) + geom_point(aes(color=sunny.s)) + geom_smooth(method="lm")
grid.arrange(bg,eg,sg, ncol=3, nrow=1)
display(mod.base);display(mod.e);display(mod.s)
mod.base<-lm(dp~sunny, data=fake)
mod.e<-lm(dp.e~sunny.e, data=fake.e)
mod.s<-lm(dp.s~sunny.s, data=fake.s)
display(mod.base);display(mod.e);display(mod.s)
?brm_multiple
library(brms)
?brm_multiple
rm(list=ls())
options(stringsAsFactors = FALSE)
# Setting working directory. Add in your own path in an if statement for your file structure
if(length(grep("lizzie", getwd())>0)) {
setwd("~/Documents/git/treegarden/budreview/ospree/bb_analysis")
} else if (length(grep("ailene", getwd()))>0) {setwd("/Users/aileneettinger/git/ospree/analyses/bb_analysis")
}else if(length(grep("Ignacio", getwd()))>0) {
setwd("~/GitHub/ospree/analyses/bb_analysis")
} else if(length(grep("catchamberlain", getwd()))>0) {
setwd("~/Documents/git/ospree/analyses/bb_analysis")
} else if(length(grep("danielbuonaiuto", getwd()))>0) {
setwd("~/Documents/git/ospree/analyses/bb_analysis")
}else setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses/bb_analysis")
library(brms)
library(rstan)
library(rstanarm)
library(mice)#for imputation
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
source("source/bbstanleadin.R")
## Comparing to rstanarm - Cat 31 Aug 2018
m2l.winsp.rstanarm <- stan_glmer(resp ~ (force + photo + chill +#main effects
force*photo + force*chill + photo*chill)+ #interactions
((force + photo + chill + force*photo + force*chill + photo*chil)|complex.wname),warmup=2500,iter=4000, data = bb.stan,
chains = 2, cores = 2,control = list(max_treedepth = 12,adapt_delta = 0.99))
## Comparing to rstanarm - Cat 31 Aug 2018
m2l.winsp.rstanarm <- stan_glmer(resp ~ (force + photo + chill +#main effects
force*photo + force*chill + photo*chill)+ #interactions
((force + photo + chill + force*photo + force*chill + photo*chill)|complex.wname),warmup=2500,iter=4000, data = bb.stan,
chains = 2, cores = 2,control = list(max_treedepth = 12,adapt_delta = 0.99))
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
# Setting working directory. Add in your own path in an if statement for your file structure
if(length(grep("Lizzie", getwd())>0)) {
setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses")
} else setwd("~/Documents/git/ospree/analyses")
library(dplyr)
library(tidyr)
library(ggplot2)
library(RColorBrewer)
## a bunch of this code is taken from cleaning/cleanup_checksmaps.R
# Get packages
#d <- read.csv("output/ospree_clean.csv")
d2<-read.csv("output/ospree_clean_withchill_BB.csv")
#studfile <- read.csv("output/studytype_table.csv", header=TRUE)
studfile2 <- read.csv("output/studytype_withBB.csv", header=TRUE)
#d <- d[d$woody=="yes",]
d2 <- d2[d2$woody=="yes",]
#d$fieldsample.date <- as.Date(d$fieldsample.date, format="%d-%b-%Y")
d2$fieldsample.date <- as.Date(d2$fieldsample.date, format="%d-%b-%Y")
#head(d)
###
###
#lookupstudyyr <- aggregate(d[c("year")], d[c("datasetID", "study")], FUN=mean)
lookupstudyyr2 <- aggregate(d2[c("year")], d2[c("datasetID", "study")], FUN=mean)
#stud <- merge(studfile, lookupstudyyr, by=c("datasetID", "study"), all.x=TRUE, all.y=TRUE)
stud2 <- merge(studfile2, lookupstudyyr2, by=c("datasetID", "study"), all.x=TRUE, all.y=TRUE)
cues<-dplyr::select(stud2, study, datasetID, force, photo, chill, chilltime, year, prov.lat, spp, field.sample)
cues<-cues[!duplicated(cues),]
cues$force<-ifelse(cues$force<=1, 0, 1)
cues$photo<-ifelse(cues$photo<=1, 0, 1)
cues$chill<-ifelse(cues$chill<=1, 0, 1)
cues$chilltime<-ifelse(cues$chilltime<=1, 0, 1)
cues$chill<-ifelse(cues$chill==1 | cues$chilltime==1, 1, 0)
cues$numcues<-cues$force + cues$photo + cues$chill
cues<-cues[!(cues$datasetID=="sogaard08" & cues$numcues==0),]
cues<-cues[!(cues$datasetID=="guerriero90" & cues$numcues==0 & cues$field.sample==1),]
cues<-cues[!(cues$datasetID=="spiers74" & cues$numcues==0 & cues$field.sample==1),]
cues<-cues[!(cues$datasetID=="worrall67" & cues$numcues==0 & cues$prov.lat==1),]
cues<-cues[!(cues$datasetID=="falusi97" & cues$numcues==0),]
cues<-cues[!(cues$datasetID=="jones12" & cues$numcues==0),]
cues<-cues[!(cues$datasetID=="sonsteby14" & cues$numcues==0),]
cues<-cues[!(cues$datasetID=="thielges" & cues$numcues==0),]
cues<-cues[!(cues$datasetID=="granhus09" | cues$datasetID=="rinne94" | cues$datasetID=="spann04"),]
cues$yr<-round(cues$year, digits=0)
studies<-as.data.frame(table(cues$yr))
studies<-studies%>%rename(yr=Var1)%>%rename(studies=Freq)
studies$yr<-as.numeric(as.character(studies$yr))
cues<-cues[!duplicated(cues),]
cues<-inner_join(cues, studies)
cues$cols<-NA
cues$cols<-ifelse(cues$numcues==1, "red", cues$cols)
cues$cols<-ifelse(cues$numcues==2, "green", cues$cols)
cues$cols<-ifelse(cues$numcues==3, "blue", cues$cols)
cues$cols<-ifelse(cues$numcues==0 & cues$field.sample>1, "violet", cues$cols)
cues$cols<-ifelse(cues$numcues==0 & cues$field.sample<=1, "white", cues$cols)
#ggplot(cues, aes(x=yr, fill=cols)) + geom_histogram()
mecolors<-colorRampPalette(brewer.pal(11,"Spectral"))(5)
hist<-ggplot(cues, aes(x=yr)) + geom_histogram(aes(fill=cols), size=0.3) +
xlab("Year") + ylab("Number of Studies") + scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=mecolors, name="Number of Cues",
labels=c("blue"="3", "green"="2", "red"="1", "violet"="Multiple Field Sample Dates", "white"="Multiple Provenance Latitudes \nand/or Species")) + scale_x_continuous(breaks=c(1950, 1960, 1970, 1980, 1990, 2000, 2010)) +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"), legend.text = element_text(size=8), legend.key.size = unit(0.5, "cm"),
axis.title=element_text(size=12), legend.title = element_text(size=8), axis.text=element_text(size=10), legend.text.align = 0)
quartz()
hist
hist<-ggplot(cues, aes(x=yr)) + geom_histogram(aes(fill=cols), size=0.3) +
xlab("Year") + ylab("Number of Studies") + scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=mecolors, name="Number of Cues Manipulated",
labels=c("blue"="3", "green"="2", "red"="1", "violet"="Multiple Field Sample Dates", "white"="Multiple Provenance Latitudes \nand/or Species")) + scale_x_continuous(breaks=c(1950, 1960, 1970, 1980, 1990, 2000, 2010)) +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"), legend.text = element_text(size=8), legend.key.size = unit(0.5, "cm"),
axis.title=element_text(size=12), legend.title = element_text(size=8), axis.text=element_text(size=10), legend.text.align = 0)
hist
=======
is.na(chill)==FALSE & is.na(resp)==FALSE)
# Vector needed to identify weinberger-design studies
if(FALSE){
weinberg<-c("falusi03", "falusi97", "heide93", "jones12", "partanen05", "ramos99",
"ashby62","basler14","biasi12","boyer","calme94","charrier11","cook00b",
"ganset02"  ,"gianfagna85","guerriero90","gunderson12")
}
if(checkdataforNAs){
forceissues <- subset(bb.resp, is.na(force)==TRUE)
table(forceissues$datasetID)
photoissues <- subset(bb.resp, is.na(photo)==TRUE)
table(photoissues$datasetID)
chillissues <- subset(bb.resp, is.na(chill)==TRUE)
table(chillissues$datasetID)
respissues <- subset(bb.resp, is.na(resp)==TRUE)
table(respissues$datasetID)
}
if(FALSE){
## what is lost due to NAs?
forceNA <- bb.resp[which(is.na(bb.resp$force)==TRUE),]
forceNA$forcetemp
subset(forceNA, forcetemp=="")  # what is up with the no entry ones? hawkins12 and gansert02
photoNA <- bb.resp[which(is.na(bb.resp$photo)==TRUE),]
photoNA$photoperiod_day # these datasetIDs are all mentioned as not possible to fix in clean_photoperiod.R
}
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
# Setting working directory. Add in your own path in an if statement for your file structure
if(length(grep("lizzie", getwd())>0)) {
setwd("~/Documents/git/treegarden/budreview/ospree/bb_analysis")
} else if (length(grep("ailene", getwd()))>0) {setwd("/Users/aileneettinger/git/ospree/analyses/bb_analysis")
}else if(length(grep("Ignacio", getwd()))>0) {
setwd("~/GitHub/ospree/analyses/bb_analysis")
} else if(length(grep("catchamberlain", getwd()))>0) {
setwd("~/Documents/git/ospree/analyses/bb_analysis")
} else if(length(grep("danielbuonaiuto", getwd()))>0) {
setwd("~/Documents/git/ospree/analyses/bb_analysis")
}else setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses/bb_analysis")
#ospree <- read.csv("output/ospree_clean_withchill_BB.csv", header=TRUE, na.strings = c("", "NA"))
#xx<-ospree
source("source/bbstanleadin.R")
hist(d$force)
xx<-d
xx[is.na(xx)] <- 0
xx <- within(xx, { force <- ifelse(forcetemp!=0, ave(forcetemp, datasetID, species,
study, FUN=function(x) length(unique(x))), 0)}) # mult forcetemp
xx <- within(xx, { chill <- ifelse(chilltemp!=0, ave(chilltemp, datasetID, species,
study, FUN=function(x) length(unique(x))), 0)}) # mult studychill
hist(xx$force)
xx<-d
hist(xx$force)
xx[is.na(xx)] <- 0
## Clean the OSPREE data ##
## By Dan Flynn, Lizzie, Ailene, Cat C., Dan B., Nacho and more! ###
## Trying to create a master cleaning file ... ##
## And away we go! ##
## Note! We found some errors in chilling entries; all those are cleaned in clean_chilltemp.R ##
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
# Set working directory:
if(length(grep("Lizzie", getwd())>0)) { setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses")
} else if
(length(grep("Ignacio", getwd()))>0) { setwd("~/GitHub/ospree/analyses")
} else if
(length(grep("ailene", getwd()))>0) {setwd("/Users/aileneettinger/git/ospree/analyses")
} else
setwd("~/Documents/git/ospree/analyses")
# Load libraries
library(dplyr)
library(tidyr)
# 1. Get the data
d <- read.csv("input/ospree.csv")
# 2. Need to deal with some basic cleaning, delete a few extraneous columns
d$X <- NULL
d$X.1 <- NULL
d$X.2 <- NULL
d$X.3 <- NULL
## Started 2 October 2017 ##
## By Lizzie (so far)##
## This code does some basic OSPREE cleaning that didn't fit anywhere else ##
## It is sourced in cleanmerge_all.R ##
# In July 2017 we realized we left year off the Zonher data, but we need it!
# So we’re adding it in here, it should be year of experiment, which is 2014.
d$year[which(d$datasetID=="zohner16")] <- 2014
# Fix a table that was mis-referenced
d$figure.table..if.applicable.[which(d$datasetID=="campbell75" &
d$figure.table..if.applicable=="table1")] <- "table2"
# Falusi97 is difficult, the data on X axis in Fig 1 is TRANSFER date, but
# you cannot tell how long they measured them for. Based on my reading I am 90% sure
# Fig 1 shows values at the end of 120 d (see main text below fig and note exp 2 was
# all 60 d) so correcting that here. I still would be cautious of using these data as
# text below fig 1 also refers to 'last chilling cutoff date (December 24)' but it is
# not possible to figure what chilling was (perhaps 'nursery' was outside?)
d$response.time[which(d$datasetID=="falusi97" & d$study=="exp1")] <- 120
#pop2000 (Dan) is wrong on many levels.
# 1) resp.var is actually percenttwigswithbudburst
# 2) response.time is actually chilling time
# I'm making those changes here, and also deleting the study from anaylsis in clean resp_varmore.R just incase it slips through
d$response.time[which(d$datasetID=="pop2000")] <- NA
d$respvar[which(d$datasetID=="pop2000")] <- "percentoftwigswithbudburst"
# Additional Edits made by Cat - 31 Jan 2017
## Moved from clean_respvar.R in Oct 2017 by Lizzie ##
# ghelardini10 issues - removed 8 rows not affiliated with study
for(i in d){
d <- d[!(d$datasetID == "ghelardini10" & d$material == "root cuttings") &
!(d$datasetID == "ghelardini10" & d$Entered.By == "DF"),]
}
###Added by Dan to make ashby  better
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="4-Mar-1957"&d$photoperiod_day==8 &
d$respvar=="daystobudburst" &d$response==3] <- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="4-Mar-1957"&d$photoperiod_day==12 &
d$respvar=="daystobudburst" &d$response==2.6]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="4-Mar-1957"&d$photoperiod_day==16 &
d$respvar=="daystobudburst" & d$response==2.6]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="5-Feb-1957"&d$photoperiod_day==8 &
d$respvar=="daystobudburst" &d$response==4.2]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="5-Feb-1957"&d$photoperiod_day==12 &
d$respvar=="daystobudburst" &d$response==4.2]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="5-Feb-1957"&d$photoperiod_day==16
& d$respvar=="daystobudburst" &d$response==4.2]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="8-Jan-1957"&d$photoperiod_day==8 &
d$respvar=="daystobudburst" &d$response==7.2]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="8-Jan-1957"&d$photoperiod_day==12 &
d$respvar=="daystobudburst" &d$response==5.8]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="8-Jan-1957"&d$photoperiod_day==16 &
d$respvar=="daystobudburst" &d$response==5.8]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="11-Dec-1956"&d$photoperiod_day==8 &
d$respvar=="daystobudburst" &d$response==13]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="11-Dec-1956"&d$photoperiod_day==12 &
d$respvar=="daystobudburst" &d$response==16.2]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="11-Dec-1956"&d$photoperiod_day==16 &
d$respvar=="daystobudburst" &d$response==32.2]<- "Central Wisconsin"
## Cleaning gheraldini10
## Issue is that the x axis is often field sample date, not time to budburst
# First, move the response time to fieldsample date and delete the data in response.time
d$fieldsample.date[d$datasetID=="ghelardini10"] <- d$response.time[d$datasetID=="ghelardini10"]
d$response.time[d$datasetID=="ghelardini10"] <- ""
# Next re-assign the values to their appropriate fieldsample date
d$fieldsample.date[d$datasetID=="ghelardini10" & d$fieldsample.date=="15"] <- "15-Oct-2002"
d$fieldsample.date[d$datasetID=="ghelardini10" & d$fieldsample.date=="45"] <- "15-Nov-2002"
d$fieldsample.date[d$datasetID=="ghelardini10" & d$fieldsample.date=="75"] <- "15-Dec-2002"
d$fieldsample.date[d$datasetID=="ghelardini10" & d$fieldsample.date=="105"] <- "15-Jan-2003"
d$fieldsample.date[d$datasetID=="ghelardini10" & d$fieldsample.date=="135"] <- "15-Feb-2003"
d$fieldsample.date[d$datasetID=="ghelardini10" & d$fieldsample.date=="165"] <- "15-Mar-2003"
d$fieldsample.date[d$datasetID=="ghelardini10" & d$fieldsample.date=="185"] <- "15-Mar-2003"
# Note: I (Lizzie) assume 165 or 185 was a typo, only 6 datapoints in either figure (and 165 is only in fig 2 and 185 only in fig 4)
# Next, we need to make sure response col is now 1 (signifying that the only response variable is days to budburst and there is not corresponding Y axis of data)
d$response.time[d$datasetID=="ghelardini10" & d$respvar=="percentbudburst"] <- d$response[d$datasetID=="ghelardini10" & d$respvar=="percentbudburst" ]
d$response.time[d$datasetID=="ghelardini10" & d$respvar=="thermaltimetobudburst"] <- d$response[d$datasetID=="ghelardini10" & d$respvar=="thermaltimetobudburst" ]
# I didn't have to do the two above as separate lines (they are the only respvar I see for ghelardini10) but I wanted to...
# ...point out that these two respvar COULD be combined I think so thermal time is the X axis and % budburst is the Y
d$response[d$datasetID=="ghelardini10"] <- 1
#In June 2018, we discovered errors in some of the freezingtemp columns
#d$freeze.treatment.temp_day[d$datasetID=="biasi12"]#this study actually did freeze treatments! but the columns are somehow shifted the values do not make sense for temperatures, mistake?
#d$freeze.treatment.temp_night[d$datasetID=="biasi12"]#the values do not make sense for temperatures but this study actually did freeze treatments! so if we want to clean it then something else should go here...
#d$chilltemp[d$datasetID=="biasi12"]#blank
######Dan B's assement of biasi12:#######
# I dont think this study actually did freeze treatments.
#The column d$freeze.treatment.temp_day is actually 'chilling hours accumulated" based on table 1. this is not reflected in Chill_Hours columns in ospree_clean_withchill_BB.csv
#Proposed solution: migrate this column to Field_Chilling_Hours somewhere in chilling code, but ask Ailene?
#the column d$free.treatment_temp_night: Is actually the field sample day
#Solution: remove values from this column?
d$freeze.treatment.temp_night[d$datasetID=="biasi12"]<-""
#The column d$response..pre.treatment is just the average days to budburst same as d$response.time
#solution remove values from this column
d$response..pre.treatment[d$datasetID=="biasi12"]<-""
d$response..post.treatment[d$datasetID=="basler12"]
d$response..pre.treatment[d$datasetID=="basler12"]
d$freeze.treatment.temp_night[d$datasetID=="basler12"]
#response
d$response..post.treatment[d$datasetID=="basler12"]<-d$response..pre.treatment[d$datasetID=="basler12"]#these were originally located in the response.pretreatment column
d$response..pre.treatment[d$datasetID=="basler12"]<-d$freeze.treatment.temp_night[d$datasetID=="basler12"]#these were originally located in the response.pretreatment column
d$response..post.treatment[d$datasetID=="basler12"]
d$freeze.treatment.temp_night[d$datasetID=="basler12"]<-""
d$figure.table..if.applicable.[d$datasetID=="basler12"]<-""
## Clean the OSPREE data ##
## By Dan Flynn, Lizzie, Ailene, Cat C., Dan B., Nacho and more! ###
## Trying to create a master cleaning file ... ##
## And away we go! ##
## Note! We found some errors in chilling entries; all those are cleaned in clean_chilltemp.R ##
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
# Set working directory:
if(length(grep("Lizzie", getwd())>0)) { setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses")
} else if
(length(grep("Ignacio", getwd()))>0) { setwd("~/GitHub/ospree/analyses")
} else if
(length(grep("ailene", getwd()))>0) {setwd("/Users/aileneettinger/git/ospree/analyses")
} else
setwd("~/Documents/git/ospree/analyses")
# Load libraries
library(dplyr)
library(tidyr)
# 1. Get the data
d <- read.csv("input/ospree.csv")
# 2. Need to deal with some basic cleaning, delete a few extraneous columns
d$X <- NULL
d$X.1 <- NULL
d$X.2 <- NULL
d$X.3 <- NULL
## Started 2 October 2017 ##
## By Lizzie (so far)##
## This code does some basic OSPREE cleaning that didn't fit anywhere else ##
## It is sourced in cleanmerge_all.R ##
# In July 2017 we realized we left year off the Zonher data, but we need it!
# So we’re adding it in here, it should be year of experiment, which is 2014.
d$year[which(d$datasetID=="zohner16")] <- 2014
# Fix a table that was mis-referenced
d$figure.table..if.applicable.[which(d$datasetID=="campbell75" &
d$figure.table..if.applicable=="table1")] <- "table2"
# Falusi97 is difficult, the data on X axis in Fig 1 is TRANSFER date, but
# you cannot tell how long they measured them for. Based on my reading I am 90% sure
# Fig 1 shows values at the end of 120 d (see main text below fig and note exp 2 was
# all 60 d) so correcting that here. I still would be cautious of using these data as
# text below fig 1 also refers to 'last chilling cutoff date (December 24)' but it is
# not possible to figure what chilling was (perhaps 'nursery' was outside?)
d$response.time[which(d$datasetID=="falusi97" & d$study=="exp1")] <- 120
#pop2000 (Dan) is wrong on many levels.
# 1) resp.var is actually percenttwigswithbudburst
# 2) response.time is actually chilling time
# I'm making those changes here, and also deleting the study from anaylsis in clean resp_varmore.R just incase it slips through
d$response.time[which(d$datasetID=="pop2000")] <- NA
d$respvar[which(d$datasetID=="pop2000")] <- "percentoftwigswithbudburst"
# Additional Edits made by Cat - 31 Jan 2017
## Moved from clean_respvar.R in Oct 2017 by Lizzie ##
# ghelardini10 issues - removed 8 rows not affiliated with study
for(i in d){
d <- d[!(d$datasetID == "ghelardini10" & d$material == "root cuttings") &
!(d$datasetID == "ghelardini10" & d$Entered.By == "DF"),]
}
###Added by Dan to make ashby  better
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="4-Mar-1957"&d$photoperiod_day==8 &
d$respvar=="daystobudburst" &d$response==3] <- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="4-Mar-1957"&d$photoperiod_day==12 &
d$respvar=="daystobudburst" &d$response==2.6]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="4-Mar-1957"&d$photoperiod_day==16 &
d$respvar=="daystobudburst" & d$response==2.6]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="5-Feb-1957"&d$photoperiod_day==8 &
d$respvar=="daystobudburst" &d$response==4.2]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="5-Feb-1957"&d$photoperiod_day==12 &
d$respvar=="daystobudburst" &d$response==4.2]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="5-Feb-1957"&d$photoperiod_day==16
& d$respvar=="daystobudburst" &d$response==4.2]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="8-Jan-1957"&d$photoperiod_day==8 &
d$respvar=="daystobudburst" &d$response==7.2]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="8-Jan-1957"&d$photoperiod_day==12 &
d$respvar=="daystobudburst" &d$response==5.8]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="8-Jan-1957"&d$photoperiod_day==16 &
d$respvar=="daystobudburst" &d$response==5.8]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="11-Dec-1956"&d$photoperiod_day==8 &
d$respvar=="daystobudburst" &d$response==13]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="11-Dec-1956"&d$photoperiod_day==12 &
d$respvar=="daystobudburst" &d$response==16.2]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="11-Dec-1956"&d$photoperiod_day==16 &
d$respvar=="daystobudburst" &d$response==32.2]<- "Central Wisconsin"
## Cleaning gheraldini10
## Issue is that the x axis is often field sample date, not time to budburst
# First, move the response time to fieldsample date and delete the data in response.time
d$fieldsample.date[d$datasetID=="ghelardini10"] <- d$response.time[d$datasetID=="ghelardini10"]
d$response.time[d$datasetID=="ghelardini10"] <- ""
# Next re-assign the values to their appropriate fieldsample date
d$fieldsample.date[d$datasetID=="ghelardini10" & d$fieldsample.date=="15"] <- "15-Oct-2002"
d$fieldsample.date[d$datasetID=="ghelardini10" & d$fieldsample.date=="45"] <- "15-Nov-2002"
d$fieldsample.date[d$datasetID=="ghelardini10" & d$fieldsample.date=="75"] <- "15-Dec-2002"
d$fieldsample.date[d$datasetID=="ghelardini10" & d$fieldsample.date=="105"] <- "15-Jan-2003"
d$fieldsample.date[d$datasetID=="ghelardini10" & d$fieldsample.date=="135"] <- "15-Feb-2003"
d$fieldsample.date[d$datasetID=="ghelardini10" & d$fieldsample.date=="165"] <- "15-Mar-2003"
d$fieldsample.date[d$datasetID=="ghelardini10" & d$fieldsample.date=="185"] <- "15-Mar-2003"
# Note: I (Lizzie) assume 165 or 185 was a typo, only 6 datapoints in either figure (and 165 is only in fig 2 and 185 only in fig 4)
# Next, we need to make sure response col is now 1 (signifying that the only response variable is days to budburst and there is not corresponding Y axis of data)
d$response.time[d$datasetID=="ghelardini10" & d$respvar=="percentbudburst"] <- d$response[d$datasetID=="ghelardini10" & d$respvar=="percentbudburst" ]
d$response.time[d$datasetID=="ghelardini10" & d$respvar=="thermaltimetobudburst"] <- d$response[d$datasetID=="ghelardini10" & d$respvar=="thermaltimetobudburst" ]
# I didn't have to do the two above as separate lines (they are the only respvar I see for ghelardini10) but I wanted to...
# ...point out that these two respvar COULD be combined I think so thermal time is the X axis and % budburst is the Y
d$response[d$datasetID=="ghelardini10"] <- 1
#In June 2018, we discovered errors in some of the freezingtemp columns
#d$freeze.treatment.temp_day[d$datasetID=="biasi12"]#this study actually did freeze treatments! but the columns are somehow shifted the values do not make sense for temperatures, mistake?
#d$freeze.treatment.temp_night[d$datasetID=="biasi12"]#the values do not make sense for temperatures but this study actually did freeze treatments! so if we want to clean it then something else should go here...
#d$chilltemp[d$datasetID=="biasi12"]#blank
######Dan B's assement of biasi12:#######
# I dont think this study actually did freeze treatments.
#The column d$freeze.treatment.temp_day is actually 'chilling hours accumulated" based on table 1. this is not reflected in Chill_Hours columns in ospree_clean_withchill_BB.csv
#Proposed solution: migrate this column to Field_Chilling_Hours somewhere in chilling code, but ask Ailene?
#the column d$free.treatment_temp_night: Is actually the field sample day
#Solution: remove values from this column?
d$freeze.treatment.temp_night[d$datasetID=="biasi12"]<-""
#The column d$response..pre.treatment is just the average days to budburst same as d$response.time
#solution remove values from this column
d$response..pre.treatment[d$datasetID=="biasi12"]<-""
d$figure.table..if.applicable.[d$datasetID=="basler12"]
d$freeze.treatment.temp_night[d$datasetID=="basler12"]
d$response..post.treatment[d$datasetID=="basler12"]
d$response..pre.treatment[d$datasetID=="basler12"]
d$freeze.treatment.temp_night[d$datasetID=="basler12"]
#response
d$response..post.treatment[d$datasetID=="basler12"]<-d$response..pre.treatment[d$datasetID=="basler12"]#these were originally located in the response.pretreatment column
d$response..pre.treatment[d$datasetID=="basler12"]<-d$freeze.treatment.temp_night[d$datasetID=="basler12"]#these were originally located in the freeze.treatment.night column
d$freeze.treatment.temp_night[d$datasetID=="basler12"]<-""
d$notes[d$datasetID=="basler12"]
colnames(d)
## Clean the OSPREE data ##
## By Dan Flynn, Lizzie, Ailene, Cat C., Dan B., Nacho and more! ###
## Trying to create a master cleaning file ... ##
## And away we go! ##
## Note! We found some errors in chilling entries; all those are cleaned in clean_chilltemp.R ##
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
# Set working directory:
if(length(grep("Lizzie", getwd())>0)) { setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses")
} else if
(length(grep("Ignacio", getwd()))>0) { setwd("~/GitHub/ospree/analyses")
} else if
(length(grep("ailene", getwd()))>0) {setwd("/Users/aileneettinger/git/ospree/analyses")
} else
setwd("~/Documents/git/ospree/analyses")
# Load libraries
library(dplyr)
library(tidyr)
# 1. Get the data
d <- read.csv("input/ospree.csv")
# 2. Need to deal with some basic cleaning, delete a few extraneous columns
d$X <- NULL
d$X.1 <- NULL
d$X.2 <- NULL
d$X.3 <- NULL
colnames(d)
#response
d$response..post.treatment[d$datasetID=="basler12"]<-d$response..pre.treatment.[d$datasetID=="basler12"]#these were originally located in the response.pretreatment column
d$response..pre.treatment.[d$datasetID=="basler12"]<-d$freeze.treatment.temp_night[d$datasetID=="basler12"]#these were originally located in the freeze.treatment.night column
d$freeze.treatment.temp_night[d$datasetID=="basler12"]<-""
colnames(d)
d$response[d$datasetID=="basler12"]<-""
d$response.time[d$datasetID=="basler12"]
cbind(d$response.time[d$datasetID=="basler12"],d$response..post.treatment[d$datasetID=="basler12"])
cbind(d$response.time[d$datasetID=="basler12"],d$response..post.treatment[d$datasetID=="basler12"],d$figure.table..if.applicable.[d$datasetID=="basler12"])
cbind(d$response.time[d$datasetID=="basler12"],d$response..post.treatment[d$datasetID=="basler12"],d$figure.table..if.applicable.[d$datasetID=="basler12"],d$genus[d$datasetID=="basler12"])
## Clean the OSPREE data ##
## By Dan Flynn, Lizzie, Ailene, Cat C., Dan B., Nacho and more! ###
## Trying to create a master cleaning file ... ##
## And away we go! ##
## Note! We found some errors in chilling entries; all those are cleaned in clean_chilltemp.R ##
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
# Set working directory:
if(length(grep("Lizzie", getwd())>0)) { setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses")
} else if
(length(grep("Ignacio", getwd()))>0) { setwd("~/GitHub/ospree/analyses")
} else if
(length(grep("ailene", getwd()))>0) {setwd("/Users/aileneettinger/git/ospree/analyses")
} else
setwd("~/Documents/git/ospree/analyses")
# Load libraries
library(dplyr)
library(tidyr)
# 1. Get the data
d <- read.csv("input/ospree.csv")
# 2. Need to deal with some basic cleaning, delete a few extraneous columns
d$X <- NULL
d$X.1 <- NULL
d$X.2 <- NULL
d$X.3 <- NULL
# 3. Clean up some super miscellaneous stuff
source("cleaning/clean_misc.R")
# 4. Clean up response variable names
source("cleaning/clean_respvar.R")
# 5. Clean up photoperiod #
source("cleaning/clean_photo.R")
# 6. Clean up forcetemp
source("cleaning/clean_forcetemp.R")
# 7. Get rid of non-woodys and clean species names
source("cleaning/clean_woody_sps.R")
# Run the below every so often (commented out because it is slow)
# This checks the species list against www.theplantlist.org ... ask for manchecksp to see non-matches
# source("cleaning/clean_spp_match.R")
# 8. Clean response and response time columns.
source("cleaning/clean_responsetime.R")
# 9. Clean the lat/long (growing and provenance)
source("cleaning/clean_latlong.R")
# 10. Remove duplicate lines
source("cleaning/clean_duplicates.R")
# 11. Write out the final file!
write.csv(d, "output/ospree_clean.csv", row.names=FALSE)
## Clean the OSPREE data ##
## By Dan Flynn, Lizzie, Ailene, Cat C., Dan B., Nacho and more! ###
## Trying to create a master cleaning file ... ##
## And away we go! ##
## Note! We found some errors in chilling entries; all those are cleaned in clean_chilltemp.R ##
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
# Set working directory:
if(length(grep("Lizzie", getwd())>0)) { setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses")
} else if
(length(grep("Ignacio", getwd()))>0) { setwd("~/GitHub/ospree/analyses")
} else if
(length(grep("ailene", getwd()))>0) {setwd("/Users/aileneettinger/git/ospree/analyses")
} else
setwd("~/Documents/git/ospree/analyses")
# Load libraries
library(dplyr)
library(tidyr)
# 1. Get the data
d <- read.csv("input/ospree.csv")
# 2. Need to deal with some basic cleaning, delete a few extraneous columns
d$X <- NULL
d$X.1 <- NULL
d$X.2 <- NULL
d$X.3 <- NULL
## Started 2 October 2017 ##
## By Lizzie (so far)##
## This code does some basic OSPREE cleaning that didn't fit anywhere else ##
## It is sourced in cleanmerge_all.R ##
# In July 2017 we realized we left year off the Zonher data, but we need it!
# So we’re adding it in here, it should be year of experiment, which is 2014.
d$year[which(d$datasetID=="zohner16")] <- 2014
# Fix a table that was mis-referenced
d$figure.table..if.applicable.[which(d$datasetID=="campbell75" &
d$figure.table..if.applicable=="table1")] <- "table2"
# Falusi97 is difficult, the data on X axis in Fig 1 is TRANSFER date, but
# you cannot tell how long they measured them for. Based on my reading I am 90% sure
# Fig 1 shows values at the end of 120 d (see main text below fig and note exp 2 was
# all 60 d) so correcting that here. I still would be cautious of using these data as
# text below fig 1 also refers to 'last chilling cutoff date (December 24)' but it is
# not possible to figure what chilling was (perhaps 'nursery' was outside?)
d$response.time[which(d$datasetID=="falusi97" & d$study=="exp1")] <- 120
#pop2000 (Dan) is wrong on many levels.
# 1) resp.var is actually percenttwigswithbudburst
# 2) response.time is actually chilling time
# I'm making those changes here, and also deleting the study from anaylsis in clean resp_varmore.R just incase it slips through
d$response.time[which(d$datasetID=="pop2000")] <- NA
d$respvar[which(d$datasetID=="pop2000")] <- "percentoftwigswithbudburst"
# Additional Edits made by Cat - 31 Jan 2017
## Moved from clean_respvar.R in Oct 2017 by Lizzie ##
# ghelardini10 issues - removed 8 rows not affiliated with study
for(i in d){
d <- d[!(d$datasetID == "ghelardini10" & d$material == "root cuttings") &
!(d$datasetID == "ghelardini10" & d$Entered.By == "DF"),]
}
###Added by Dan to make ashby  better
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="4-Mar-1957"&d$photoperiod_day==8 &
d$respvar=="daystobudburst" &d$response==3] <- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="4-Mar-1957"&d$photoperiod_day==12 &
d$respvar=="daystobudburst" &d$response==2.6]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="4-Mar-1957"&d$photoperiod_day==16 &
d$respvar=="daystobudburst" & d$response==2.6]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="5-Feb-1957"&d$photoperiod_day==8 &
d$respvar=="daystobudburst" &d$response==4.2]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="5-Feb-1957"&d$photoperiod_day==12 &
d$respvar=="daystobudburst" &d$response==4.2]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="5-Feb-1957"&d$photoperiod_day==16
& d$respvar=="daystobudburst" &d$response==4.2]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="8-Jan-1957"&d$photoperiod_day==8 &
d$respvar=="daystobudburst" &d$response==7.2]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="8-Jan-1957"&d$photoperiod_day==12 &
d$respvar=="daystobudburst" &d$response==5.8]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="8-Jan-1957"&d$photoperiod_day==16 &
d$respvar=="daystobudburst" &d$response==5.8]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="11-Dec-1956"&d$photoperiod_day==8 &
d$respvar=="daystobudburst" &d$response==13]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="11-Dec-1956"&d$photoperiod_day==12 &
d$respvar=="daystobudburst" &d$response==16.2]<- "Central Wisconsin"
d$population[d$datasetID=="ashby62"&d$fieldsample.date=="11-Dec-1956"&d$photoperiod_day==16 &
d$respvar=="daystobudburst" &d$response==32.2]<- "Central Wisconsin"
## Cleaning gheraldini10
## Issue is that the x axis is often field sample date, not time to budburst
# First, move the response time to fieldsample date and delete the data in response.time
d$fieldsample.date[d$datasetID=="ghelardini10"] <- d$response.time[d$datasetID=="ghelardini10"]
d$response.time[d$datasetID=="ghelardini10"] <- ""
# Next re-assign the values to their appropriate fieldsample date
d$fieldsample.date[d$datasetID=="ghelardini10" & d$fieldsample.date=="15"] <- "15-Oct-2002"
d$fieldsample.date[d$datasetID=="ghelardini10" & d$fieldsample.date=="45"] <- "15-Nov-2002"
d$fieldsample.date[d$datasetID=="ghelardini10" & d$fieldsample.date=="75"] <- "15-Dec-2002"
d$fieldsample.date[d$datasetID=="ghelardini10" & d$fieldsample.date=="105"] <- "15-Jan-2003"
d$fieldsample.date[d$datasetID=="ghelardini10" & d$fieldsample.date=="135"] <- "15-Feb-2003"
d$fieldsample.date[d$datasetID=="ghelardini10" & d$fieldsample.date=="165"] <- "15-Mar-2003"
d$fieldsample.date[d$datasetID=="ghelardini10" & d$fieldsample.date=="185"] <- "15-Mar-2003"
# Note: I (Lizzie) assume 165 or 185 was a typo, only 6 datapoints in either figure (and 165 is only in fig 2 and 185 only in fig 4)
# Next, we need to make sure response col is now 1 (signifying that the only response variable is days to budburst and there is not corresponding Y axis of data)
d$response.time[d$datasetID=="ghelardini10" & d$respvar=="percentbudburst"] <- d$response[d$datasetID=="ghelardini10" & d$respvar=="percentbudburst" ]
d$response.time[d$datasetID=="ghelardini10" & d$respvar=="thermaltimetobudburst"] <- d$response[d$datasetID=="ghelardini10" & d$respvar=="thermaltimetobudburst" ]
# I didn't have to do the two above as separate lines (they are the only respvar I see for ghelardini10) but I wanted to...
# ...point out that these two respvar COULD be combined I think so thermal time is the X axis and % budburst is the Y
d$response[d$datasetID=="ghelardini10"] <- 1
#In June 2018, we discovered errors in some of the freezingtemp columns
#d$freeze.treatment.temp_day[d$datasetID=="biasi12"]#this study actually did freeze treatments! but the columns are somehow shifted the values do not make sense for temperatures, mistake?
#d$freeze.treatment.temp_night[d$datasetID=="biasi12"]#the values do not make sense for temperatures but this study actually did freeze treatments! so if we want to clean it then something else should go here...
#d$chilltemp[d$datasetID=="biasi12"]#blank
######Dan B's assement of biasi12:#######
# I dont think this study actually did freeze treatments.
#The column d$freeze.treatment.temp_day is actually 'chilling hours accumulated" based on table 1. this is not reflected in Chill_Hours columns in ospree_clean_withchill_BB.csv
#Proposed solution: migrate this column to Field_Chilling_Hours somewhere in chilling code, but ask Ailene?
#the column d$free.treatment_temp_night: Is actually the field sample day
#Solution: remove values from this column?
d$freeze.treatment.temp_night[d$datasetID=="biasi12"]<-""
#The column d$response..pre.treatment is just the average days to budburst same as d$response.time
#solution remove values from this column
d$response..pre.treatment[d$datasetID=="biasi12"]<-""
#response
d$response..post.treatment[d$datasetID=="basler12"]<-d$response..pre.treatment.[d$datasetID=="basler12"]#these were originally located in the response.pretreatment column
d$response..pre.treatment.[d$datasetID=="basler12"]<-d$freeze.treatment.temp_night[d$datasetID=="basler12"]#these were originally located in the freeze.treatment.night column
colnames(d)
d$other.treatment[d$datasetID=="basler12"]
d$population.altitude.m[d$datasetID=="basler12"]
>>>>>>> Stashed changes
