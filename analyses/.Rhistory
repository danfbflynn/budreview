#find_hull.geo <- function(fxx) fxx[chull(fxx$Lat, fxx$photoperiod), ]
#library(plyr)
#hulls.geo <- ddply(fxx, "type", find_hull.geo)
fxx$photo.type<-ifelse(fxx$photo.type=="daylength", "current", fxx$photo.type)
fxx$photo.type<-ifelse(fxx$photo.type=="proj.photo", "aprojected", fxx$photo.type)
fxx$phen.type<-ifelse(fxx$phen.type=="lodoy", "current", fxx$phen.type)
fxx$phen.type<-ifelse(fxx$phen.type=="proj.lodoy", "aprojected", fxx$phen.type)
unique(ave(fxx$doy[which(fxx$phen.type=="current")], FUN=min)) ## 95
fxx$doy<-ifelse(fxx$phen.type=="ospree", fxx$doy+95, fxx$doy)
cols <- colorRampPalette(brewer.pal(9,"Spectral"))(2)
geo.photo<-ggplot(fxx, aes(x=Lat, y=photoperiod, col=photo.type, shape=photo.type, alpha=photo.type)) + geom_point(aes(col=photo.type)) + geom_jitter(aes(col=photo.type)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
text=element_text(family="sans")) + xlab("Latitude") + ylab("Daylength (hours)") +
guides(col=FALSE) + ggtitle("A") +
scale_colour_manual(name="Data Type", values=c(cols,"black"),
labels=c(current = "Current",
aprojected = "Projected",
ospree = "OSPREE")) + guides(shape=FALSE, alpha=FALSE)+
scale_shape_manual(name="Data Type", values=c(16, 15, 17),
labels=c(current = "Current",
aprojected = "Projected",
ospree = "OSPREE")) +
scale_alpha_manual(name="Data Type", values=c(0.1,0.1,1),
labels=c(zcurrent = "Current",
projected = "Projected",
ospree = "OSPREE")) +
scale_y_continuous(limits=c(0, 25), breaks=c(0,4,8,12,16,20,24), expand=c(0,0))
#phen<- ggplot(ff, aes(x=phen.shift, y=photo.shift)) + geom_point(aes(col=type)) + geom_jitter() +
#geom_polygon( data=hulls.phen, alpha=.5, aes(fill=type)) +
#theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
#     panel.background = element_blank(), axis.line = element_line(colour = "black"),
#    axis.ticks.y = element_blank(), legend.position = "none")
#find_hull.phen <- function(fxx) fxx[chull(fxx$doy, fxx$photoperiod), ]
#hulls.phen <- ddply(fxx, "type", find_hull.phen)
doy.photo<- ggplot(fxx, aes(x=doy, y=photoperiod, col=phen.type, shape=phen.type, alpha=phen.type)) + geom_point(aes(col=phen.type)) + geom_jitter(aes(col=phen.type)) +
#geom_polygon( data=hulls.phen, alpha=.5, aes(fill=phen.type)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.82,0.85), legend.text = element_text(size=9), legend.title = element_text(size=10),
legend.key = element_rect(colour = NA, fill = NA), legend.box.background = element_rect(), text=element_text(family="sans")) + xlab("Day of Budburst") + ylab("Daylength (hours)") +
labs(col="Data Type") + ggtitle("B") +
scale_colour_manual(name="Data Type", values=c(cols, "black"),
labels=c(current = "Current",
aprojected = "Projected",
ospree = "OSPREE")) + guides(size=FALSE, alpha=FALSE) +
scale_shape_manual(name="Data Type", values=c(16, 15, 17),
labels=c(current = "Current",
aprojected = "Projected",
ospree = "OSPREE")) +
scale_alpha_manual(name="Data Type", values=c(0.1,0.1,1),
labels=c(current = "Current",
aprojected = "Projected",
ospree = "OSPREE")) +
scale_y_continuous(limits=c(0, 25), breaks=c(0,4,8,12,16,20,24), expand=c(0,0))
#library(egg)
quartz()
ggarrange(geo.photo, doy.photo, ncol=2)
#### Check the OSPREE data that's nearly 2x later budburst
check<-fxx[(fxx$doy>147),]
check$date<-as.Date(check$doy, origin = "2018-01-01")
check$daylength<-daylength(check$Lat, check$date)
check$photodiff<-check$daylength-check$photoperiod
check$latitude<-round(check$Lat, digits=1)
fxx.diff<-fxx[(fxx$phen.type=="current"),]
fxx.diff$latitude<-round(fxx.diff$Lat, digits=1)
fxx.diff$mdoy<-ave(fxx.diff$doy, fxx.diff$latitude)
check$diff.doy<-NA
for(i in c(1:nrow(fxx.diff))){
for(j in c(1:nrow(check)))
check$diff.doy[j]<-ifelse(check$latitude[j]==fxx.diff$latitude[i], check$doy[j]-fxx.diff$mdoy[i], check$diff.doy[j])
}
setwd("~/Documents/git/ospree/analyses")
## to start
rm(list=ls())
options(stringsAsFactors=FALSE)
## load packages
library(tidyr)
library(dplyr)
library(geosphere)
library(lubridate)
library(ggplot2)
library(RColorBrewer)
############################################
############# Phenofit Stuff ###############
############################################
fs.present<-read.csv("output/phenofit_projections/Fagus_sylvatica_1981_2000_daylength.csv", header=TRUE)
fs.pres<-read.csv("output/phenofit_projections/Fagus_sylvatica_1981_2000.csv", header=TRUE)
fs.proj<-read.csv("output/phenofit_projections/Fagus_sylvatica_A1Fi_2081_2100_daylength.csv", header=TRUE)
fs.proj.pres<-read.csv("output/phenofit_projections/Fagus_sylvatica_A1Fi_2081_2100.csv", header=TRUE)
fs.present<-fs.present%>%dplyr::rename(mleaf=MeanDateLeaf)
fs.proj<-fs.proj%>%dplyr::rename(proj.lodoy=lodoy)%>%dplyr::rename(proj.photo=daylength)
fs<-full_join(fs.present, fs.proj)
fs.pres<-subset(fs.pres, pres==1)
fs.pres$avg<-ave(fs.pres$Lat)
fs.proj.pres<-subset(fs.proj.pres, pres==1)
fs.proj.pres$avg<-ave(fs.proj.pres$Lat)
shift<-unique(fs.proj.pres$avg) - unique(fs.pres$avg)
fs.pres$geo.shift<-fs.pres$Lat + shift
fs.geo<-full_join(fs, fs.pres)
fs.geo$date<-as.Date(fs.geo$lodoy, origin = "2000-01-01")
fs.geo$photo.shift<-fs.geo$daylength-fs.geo$proj.photo
#fs.geo$photo.shift<-NA
#for(i in c(1:nrow(fs.geo))){
#  fs.geo$photo.shift[i] <- daylength(fs.geo$geo.shift[i], fs.geo$date[i])
#}
fs.geo<-fs.geo[!is.na(fs.geo$photo.shift),]
fs.geo<-fs.geo[!is.na(fs.geo$geo.shift),]
fs.geo$phen.shift<-fs.geo$lodoy-fs.geo$proj.lodoy ## first pheno.shift
fs.geo$type<-"projected"
###### Ospree now! ########
osp<-read.csv("output/ospree_clean_withchill_BB.csv", header=TRUE)
fsyl<-osp[which(osp$genus=="Fagus" & osp$species == "sylvatica" & osp$respvar.simple=="daystobudburst"),]
fsyl<-fsyl%>%dplyr::select(datasetID, genus, species, photoperiod_day, response.time, provenance.lat, fieldsample.date2)
fsyl<-fsyl[(fsyl$response.time!=999),]
fsyl$photoperiod_day<-as.numeric(fsyl$photoperiod_day)
fsyl$photo.min<-ave(fsyl$photoperiod_day, fsyl$datasetID, FUN=min)
fsyl$photo.max<-ave(fsyl$photoperiod_day, fsyl$datasetID, FUN=max)
fsyl$photo.shift<-fsyl$photo.max-fsyl$photo.min
fsyl$response.time<-as.numeric(fsyl$response.time)
bb.min<-fsyl[which(fsyl$photoperiod_day==fsyl$photo.min),]
bb.min$bb.min<-ave(bb.min$response.time, bb.min$datasetID)
bb.max<-fsyl[which(fsyl$photoperiod_day==fsyl$photo.max),]
bb.max$bb.max<-ave(bb.max$response.time, bb.max$datasetID)
fsyl$phen.shift<-NA
fsyl$lo.pre<-NA
fsyl$lo.post<-NA
for(i in c(1:nrow(fsyl))){
for(j in c(1:nrow(bb.min)))
for(k in c(1:nrow(bb.max)))
fsyl$phen.shift[i]<-ifelse(fsyl$datasetID[i]==bb.min$datasetID[j] & fsyl$datasetID[i]==bb.max$datasetID[k],
bb.min$bb.min[j]-bb.max$bb.max[k], fsyl$phen.shift[i])
fsyl$lo.pre[i]<-ifelse(fsyl$datasetID[i]==bb.min$datasetID[j],
bb.min$bb.min[j], fsyl$lo.pre[i])
fsyl$lo.post[i]<-ifelse(fsyl$datasetID[i]==bb.min$datasetID[j],
bb.max$bb.max[k], fsyl$lo.post[i])
}
fsyl$provenance.lat<-as.numeric(fsyl$provenance.lat)
#### Using code from Ailene's shifts_table.R ###
fsyl$phendate<-ave(fsyl$response.time, fsyl$datasetID)
fsyl$space<-NA
for(i in 1:length(fsyl$provenance.lat)){
latshift<-seq(0,40,by=.1)#look at daylengths of latitudes from study site to study site plus 40 degrees
photos_spat<-daylength(fsyl$provenance.lat[i]+latshift, fsyl$phendate[i])
#photop$space[i]<-
maxdelta_space<-max(photos_spat, na.rm=TRUE)-min(photos_spat, na.rm=TRUE)#maxim
delta_space<-photos_spat[1]-photos_spat#change in daylength latitudes ranging from study site to study site plus 40 degrees
if(maxdelta_space<abs(fsyl$photo.shift[i])){fsyl$space[i]<-100}#exceeds range
else
fsyl$space[i]<-latshift[min(which(round(delta_space, digits=2)==fsyl$photo.shift[i]))]#select min lat shift required to get change in daylength in experiments
if(is.na(fsyl$space[i])){
mindiff<-min(abs(fsyl$photo.shift[i]-delta_space), na.rm=TRUE)
if(!is.na(mindiff) & mindiff<0.5){fsyl$space[i]<-latshift[which(abs(fsyl$photo.shift[i]-delta_space)==mindiff)]
}else {
fsyl$space[i]<-NA
}
}
}
fsyl$space<-as.numeric(fsyl$space)
fsyl$geo.shift<-fsyl$space+fsyl$provenance.lat
fsyl<-fsyl%>%dplyr::rename(photoperiod=photoperiod_day)%>%dplyr::rename(doy=response.time)%>%dplyr::rename(Lat=provenance.lat)
fsyl$photo.type<-"ospree"
fsyl$phen.type<-"ospree"
fsyl<-fsyl%>%dplyr::select(Lat, photoperiod, photo.type, phen.type, doy)
fs<-dplyr::select(fs.geo, Lat, mleaf, lodoy, daylength, type, photo.shift, geo.shift, phen.shift, proj.lodoy, proj.photo, daylength)
fx<-fs%>%gather("phen.type", "doy", -Lat, -mleaf, -type, -photo.shift, -geo.shift,
-phen.shift, -proj.photo, -daylength)
fxx<-fx%>%gather("photo.type", "photoperiod", -Lat, -mleaf, -doy, -phen.type, -type, -photo.shift, -geo.shift, -phen.shift,
-doy)
fxx<-dplyr::select(fxx, Lat, photoperiod, photo.type, doy, phen.type)
fxx<-full_join(fxx, fsyl)
#find_hull.geo <- function(fxx) fxx[chull(fxx$Lat, fxx$photoperiod), ]
#library(plyr)
#hulls.geo <- ddply(fxx, "type", find_hull.geo)
fxx$photo.type<-ifelse(fxx$photo.type=="daylength", "current", fxx$photo.type)
fxx$photo.type<-ifelse(fxx$photo.type=="proj.photo", "aprojected", fxx$photo.type)
fxx$phen.type<-ifelse(fxx$phen.type=="lodoy", "current", fxx$phen.type)
fxx$phen.type<-ifelse(fxx$phen.type=="proj.lodoy", "aprojected", fxx$phen.type)
unique(ave(fxx$doy[which(fxx$phen.type=="current")], FUN=min)) ## 95
fxx$doy<-ifelse(fxx$phen.type=="ospree", fxx$doy+95, fxx$doy)
cols <- colorRampPalette(brewer.pal(9,"Spectral"))(2)
geo.photo<-ggplot(fxx, aes(x=Lat, y=photoperiod, col=photo.type, shape=photo.type, alpha=photo.type)) + geom_point(aes(col=photo.type)) + geom_jitter(aes(col=photo.type)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
text=element_text(family="sans")) + xlab("Latitude") + ylab("Daylength (hours)") +
guides(col=FALSE) + ggtitle("A") +
scale_colour_manual(name="Data Type", values=c(cols,"black"),
labels=c(current = "Current",
aprojected = "Projected",
ospree = "OSPREE")) + guides(shape=FALSE, alpha=FALSE)+
scale_shape_manual(name="Data Type", values=c(16, 15, 17),
labels=c(current = "Current",
aprojected = "Projected",
ospree = "OSPREE")) +
scale_alpha_manual(name="Data Type", values=c(0.1,0.1,1),
labels=c(zcurrent = "Current",
projected = "Projected",
ospree = "OSPREE")) +
scale_y_continuous(limits=c(0, 25), breaks=c(0,4,8,12,16,20,24), expand=c(0,0))
#phen<- ggplot(ff, aes(x=phen.shift, y=photo.shift)) + geom_point(aes(col=type)) + geom_jitter() +
#geom_polygon( data=hulls.phen, alpha=.5, aes(fill=type)) +
#theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
#     panel.background = element_blank(), axis.line = element_line(colour = "black"),
#    axis.ticks.y = element_blank(), legend.position = "none")
#find_hull.phen <- function(fxx) fxx[chull(fxx$doy, fxx$photoperiod), ]
#hulls.phen <- ddply(fxx, "type", find_hull.phen)
doy.photo<- ggplot(fxx, aes(x=doy, y=photoperiod, col=phen.type, shape=phen.type, alpha=phen.type)) + geom_point(aes(col=phen.type)) + geom_jitter(aes(col=phen.type)) +
#geom_polygon( data=hulls.phen, alpha=.5, aes(fill=phen.type)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.82,0.85), legend.text = element_text(size=9), legend.title = element_text(size=10),
legend.key = element_rect(colour = NA, fill = NA), legend.box.background = element_rect(), text=element_text(family="sans")) + xlab("Day of Budburst") + ylab("Daylength (hours)") +
labs(col="Data Type") + ggtitle("B") +
scale_colour_manual(name="Data Type", values=c(cols, "black"),
labels=c(current = "Current",
aprojected = "Projected",
ospree = "OSPREE")) + guides(size=FALSE, alpha=FALSE) +
scale_shape_manual(name="Data Type", values=c(16, 15, 17),
labels=c(current = "Current",
aprojected = "Projected",
ospree = "OSPREE")) +
scale_alpha_manual(name="Data Type", values=c(0.1,0.1,1),
labels=c(current = "Current",
aprojected = "Projected",
ospree = "OSPREE")) +
scale_y_continuous(limits=c(0, 25), breaks=c(0,4,8,12,16,20,24), expand=c(0,0))
#library(egg)
quartz()
ggarrange(geo.photo, doy.photo, ncol=2)
#### Check the OSPREE data that's nearly 2x later budburst
check<-fxx[(fxx$doy>147),]
check$date<-as.Date(check$doy, origin = "2018-01-01")
check$daylength<-daylength(check$Lat, check$date)
check$photodiff<-check$daylength-check$photoperiod
check$latitude<-round(check$Lat)
fxx.diff<-fxx[(fxx$phen.type=="current"),]
fxx.diff$latitude<-round(fxx.diff$Lat)
fxx.diff$mdoy<-ave(fxx.diff$doy, fxx.diff$latitude)
check$diff.doy<-NA
for(i in c(1:nrow(fxx.diff))){
for(j in c(1:nrow(check)))
check$diff.doy[j]<-ifelse(check$latitude[j]==fxx.diff$latitude[i], check$doy[j]-fxx.diff$mdoy[i], check$diff.doy[j])
}
View(fsyl)
osp<-osp[(osp$genus=="Fagus" & osp$species=="sylvatica"),]
162.5-95
152.4-95
156.23-95
###### Ospree now! ########
osp<-read.csv("output/ospree_clean_withchill_BB.csv", header=TRUE)
range(osp$Total_Utah_Model)
osp$Total_Chill_portions<-as.numeric(osp$Total_Chill_portions)
range(osp$Total_Chill_portions)
View(osp)
hist(osp$Total_Chill_portions)
hist(osp$forcetemp)
osp$forcetemp<-as.numeric(osp$forcetemp)
hist(osp$forcetemp)
osp<-osp[(osp$genus=="Fagus" & osp$species=="sylvatica"),]
View(osp)
daylength(48.16447, "2015-03-18")
View(fxx)
## Take 2: February 2017! ##
## Take 3: July 2017! ## Nacho's clean code to run stan models on Ospree
############################################
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
#library(rstan)
library(ggplot2)
#library(shinystan)
#library(bayesplot)
library(rstanarm)
library(brms)
library(ggstance)
library(forcats)
setwd("~/Documents/git/ospree/analyses")
########################
#### get the data
source("lat_analysis/source/bbdataplease.R")
## (2) Deal with species
dim(bb.noNA)
d <- bb.noNA
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
library(rstan)
library(shinystan)
rstan_options(auto_write = TRUE)
########################
#### get the data
source("lat_analysis/source/bbdataplease.R")
## (2) Deal with species
dim(bb.noNA)
d <- bb.noNA
########################
#### get the data
source("lat_analysis/source/bbstanleadin.R")
# merge in labgroup (we could do this elsewhere someday)
bb.wlab <- within(bb.wlab, { prov.lat <- ave(provenance.lat, complex, FUN=function(x) length(unique(x)))}) # multiple provenance.lats
########################
#### get the data
source("lat_analysis/source/bbstanleadin.R")
setwd("~/Documents/git/ospree/analyses")
## Take 2: February 2017! ##
## Take 3: July 2017! ## Nacho's clean code to run stan models on Ospree
############################################
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
library(rstan)
library(ggplot2)
library(shinystan)
#library(bayesplot)
library(rstanarm)
library(brms)
library(ggstance)
setwd("~/Documents/git/ospree/analyses")
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
########################
#### get the data
source("lat_analysis/source/bbstanleadin.R")
# Setting working directory. Add in your own path in an if statement for your file structure
if(length(grep("danflynn", getwd())>0)) {
setwd("~/Documents/git/ospree")
} else setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses")
setwd("~/Documents/git/ospree/analyses/lat_analysis")
########################
#### get the data
source("source/bbstanleadin.R")
setwd("~/Documents/git/ospree/analyses")
########################
#### get the data
source("/bb_analysis/source/bbstanleadin.R")
########################
#### get the data
source("bb_analysis/source/bbstanleadin.R")
setwd("~/Documents/git/ospree/analyses/bb_analysis")
source("source/bbstanleadin.R")
colnames(bb.stan)
colnames(xx)
## Take 2: February 2017! ##
## Take 3: July 2017! ## Nacho's clean code to run stan models on Ospree
############################################
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
library(rstan)
library(ggplot2)
library(shinystan)
#library(bayesplot)
library(rstanarm)
library(brms)
library(ggstance)
setwd("~/Documents/git/ospree/analyses")
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
########################
#### get the data
source("lat_analysis/source/bbdataplease.R")
## (2) Deal with species
dim(bb.noNA)
d <- bb.noNA
source("lat_analysis/source/speciescomplex.R")
bb.noNA.wtaxa <- d
dim(bb.noNA.wtaxa)
unique(bb.noNA.wtaxa$complex)
# merge in labgroup (we could do this elsewhere someday)
bb.wlab <- merge(bb.resp, taxon, by=c("genus","species"), all.x=TRUE)
bb.wlab <- within(bb.wlab, { prov.lat <- ave(provenance.lat, complex, FUN=function(x) length(unique(x)))}) # multiple provenance.lats
bb.wlab <- subset(bb.wlab, bb.wlab$prov.lat>1)
bb.wlab.photo<- within(bb.wlab, { photo <- ave(photoperiod_day, complex, FUN=function(x) length(unique(x)))}) # multiple photoperiods
bb.wlab.photo <- subset(bb.wlab.photo, bb.wlab.photo$photo>1)
tt <- table(bb.wlab.photo$complex)### testing
bb.wlab<-bb.wlab.photo
# [1] "Betula_complex"        "Betula_pendula"        "Betula_pubescens"      "Fagus_sylvatica"
# [5] "Malus_domestica"       "Picea_abies"           "Picea_glauca"          "Pseudotsuga_menziesii"
# [9] "Ribes_nigrum"          "Ulmus_complex"
myspp<-c("Betula_pendula", "Betula_pubescens", "Fagus_sylvatica", "Picea_abies", "Pseudotsuga_menziesii", "Ulmus_complex")
bb.wlab<-dplyr::filter(bb.wlab, complex%in%myspp)
table(bb.wlab$complex, bb.wlab$datasetID)
bb.wlab<-within(bb.wlab, { studies <- ave(datasetID, complex, FUN=function(x) length(unique(x)))})
## Take 2: February 2017! ##
## Take 3: July 2017! ## Nacho's clean code to run stan models on Ospree
############################################
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
library(rstan)
library(ggplot2)
library(shinystan)
#library(bayesplot)
library(rstanarm)
library(brms)
library(ggstance)
setwd("~/Documents/git/ospree/analyses")
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
########################
#### get the data
source("lat_analysis/source/bbdataplease.R")
## (2) Deal with species
dim(bb.noNA)
d <- bb.noNA
source("lat_analysis/source/speciescomplex.R")
bb.noNA.wtaxa <- d
dim(bb.noNA.wtaxa)
unique(bb.noNA.wtaxa$complex)
# merge in labgroup (we could do this elsewhere someday)
bb.wlab <- merge(bb.resp, taxon, by=c("genus","species"), all.x=TRUE)
bb.wlab <- within(bb.wlab, { prov.lat <- ave(provenance.lat, complex, FUN=function(x) length(unique(x)))}) # multiple provenance.lats
bb.wlab <- subset(bb.wlab, bb.wlab$prov.lat>1)
bb.wlab.photo<- within(bb.wlab, { photo <- ave(photoperiod_day, complex, FUN=function(x) length(unique(x)))}) # multiple photoperiods
bb.wlab.photo <- subset(bb.wlab.photo, bb.wlab.photo$photo>1)
tt <- table(bb.wlab.photo$complex)### testing
bb.wlab<-bb.wlab.photo
# [1] "Betula_complex"        "Betula_pendula"        "Betula_pubescens"      "Fagus_sylvatica"
# [5] "Malus_domestica"       "Picea_abies"           "Picea_glauca"          "Pseudotsuga_menziesii"
# [9] "Ribes_nigrum"          "Ulmus_complex"
myspp<-c("Betula_pendula", "Betula_pubescens", "Fagus_sylvatica", "Picea_abies", "Pseudotsuga_menziesii", "Ulmus_complex")
bb.wlab<-dplyr::filter(bb.wlab, complex%in%myspp)
studies<-subset(bb.wlab, select(datasetID, complex))
studies<-subset(bb.wlab, select=c(datasetID, complex))
studies<-studies[!duplicated(studies),]
studies<-within(bb.wlab, { studies <- ave(datasetID, complex, FUN=function(x) length(unique(x)))})
View(studies)
studies<-subset(bb.wlab, select=c(bb.wlab$datasetID, bb.wlab$complex))
studies<-dplyr::select(bb.wlab, datasetID, complex)
studies<-studies[!duplicated(studies),]
studies<-within(bb.wlab, { studies <- ave(datasetID, complex, FUN=function(x) length(unique(x)))})
studies<-subset(bb.wlab, select=c(bb.wlab$datasetID, bb.wlab$complex))
studies<-subset(bb.wlab, select=c(datasetID, complex))
studies<-dplyr::select(bb.wlab, datasetID, complex)
studies<-studies[!duplicated(studies),]
studies<-within(studies, { studies <- ave(datasetID, complex, FUN=function(x) length(unique(x)))})
View(studies)
studies<-dplyr::select(studies, -datasetID)
studies<-studies[!duplicated(studies),]
View(studies)
### Species random slope effect for main effects only, random intercept for datasetID
lat.stan_brm<-brm(resp~ force + photo + sm.chill + lat + photo:lat + (1|datasetID) +
(force + photo + sm.chill + lat|sp), data=ospr.stan)
columnstokeep <- c("datasetID", "genus", "species", "varetc", "woody", "forcetemp",
"photoperiod_day", "response", "response.time", "Total_Utah_Model",
"complex", "provenance.lat")
bb.wlab.sm <- subset(bb.wlab, select=columnstokeep)
## make a bunch of things numeric (eek!)
bb.wlab.sm$force <- as.numeric(bb.wlab.sm$forcetemp)
bb.wlab.sm$photo <- as.numeric(bb.wlab.sm$photoperiod_day)
bb.wlab.sm$chill <- as.numeric(bb.wlab.sm$Total_Utah_Model)
bb.wlab.sm$resp <- as.numeric(bb.wlab.sm$response.time)
bb.wlab.sm$lat<-as.numeric(bb.wlab.sm$provenance.lat)
## subsetting data, preparing genus variable, removing NAs
ospr.prepdata <- subset(bb.wlab.sm, select=c("resp", "chill", "photo", "force", "complex", "lat", "datasetID"))
dim(subset(bb.wlab.sm, is.na(chill)==FALSE & is.na(photo)==FALSE & is.na(force)==FALSE
& is.na(lat)==FALSE & is.na(datasetID)==FALSE))
ospr.stan <- ospr.prepdata[complete.cases(ospr.prepdata),]
ospr.stan$sp <- as.numeric(as.factor(ospr.stan$complex))
## Center? or Z-score?
ospr.stan$sm.chill<-ospr.stan$chill/240
osp.stan <- subset(osp.stan, resp<600)
ospr.stan <- subset(ospr.stan, resp<600)
### Species random slope effect for main effects only, random intercept for datasetID
lat.stan_brm<-brm(resp~ force + photo + sm.chill + lat + photo:lat + (1|datasetID) +
(force + photo + sm.chill + lat|sp), data=ospr.stan)
### Species random slope effect for main effects only
lat.stan_brm<-brm(resp~ force + photo + sm.chill + lat + photo:lat +
(force + photo + sm.chill + lat|sp), data=ospr.stan)
range(ospr.stan$resp)
hist(ospr.stan$resp)
dev.off
hist(ospr.stan$resp)
dev.new
hist(ospr.stan$resp)
dev.off()
hist(ospr.stan$chill)
hist(ospr.stan$sm.chill)
hist(ospr.stan$photo)
hist(ospr.stan$force)
hist(ospr.stan$lat)
### Species random slope effect for main effects only
lat.stan<-stan.glmer(resp~ force + photo + sm.chill + lat + photo:lat +
(force + photo + sm.chill + lat|sp), data=ospr.stan, warmup=2500,iter=4000,
chains = 2, cores = 2,control = list(max_treedepth = 12,adapt_delta = 0.99))
#library(bayesplot)
library(rstanarm)
### Species random slope effect for main effects only
lat.stan<-stan_glmer(resp~ force + photo + sm.chill + lat + photo:lat +
(force + photo + sm.chill + lat|sp), data=ospr.stan, warmup=2500,iter=4000,
chains = 2, cores = 2,control = list(max_treedepth = 12,adapt_delta = 0.99))
lat.stan
pp_check(lat.stan)
lat.stan_brm<-brm(resp~ force + photo + sm.chill + lat + photo:lat +
(force + photo + sm.chill + lat|sp), data=ospr.stan, warmup=2500,iter=4000,
chains = 2, cores = 2,control = list(max_treedepth = 12,adapt_delta = 0.99))
View(studies)
summary(lat.stan_brm)
lat.inter_brm<-brm(resp~ force + photo + sm.chill + lat + photo:lat + force:photo + force:sm.chill +
photo:sm.chill + force:lat + sm.chill:lat +
(force + photo + sm.chill + lat|sp), data=ospr.stan, warmup=2500,iter=4000,
chains = 2, cores = 2,control = list(max_treedepth = 12,adapt_delta = 0.99))
summary(lat.inter_brm)
lat.study_brm<-brm(resp~ force + photo + sm.chill + lat + photo:lat + (1|datasetID) +
(force + photo + sm.chill + lat|sp), data=ospr.stan, warmup=2500,iter=4000,
chains = 2, cores = 2,control = list(max_treedepth = 12,adapt_delta = 0.99))
summary(lat.study_brm)
summary(lat.stan_brm) ## quite different from rstanrarm!
lat.inter_arm<-stan_glmer(resp~ force + photo + sm.chill + lat + photo:lat + force:photo + force:sm.chill +
photo:sm.chill + force:lat + sm.chill:lat +
(force + photo + sm.chill + lat|sp), data=ospr.stan, warmup=2500,iter=4000,
chains = 2, cores = 2,control = list(max_treedepth = 12,adapt_delta = 0.99))
summary(lat.inter_arm)
