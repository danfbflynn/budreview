install.packages("BioGeoBEARS",    dependencies=TRUE,	repos="http://cran.rstudio.com")
library(BioGeoBEARS)
install.packages("snow",    dependencies	=	TRUE,	repos	=	"http://cran.rstudio.com")
library(snow)
install.packages("optimx",    dependencies =	TRUE,	repos	=	"http://cran.rstudio.com")
install.packages("optimx", dependencies = TRUE, repos = "http://cran.rstudio.com")
library(optimx)
install.packages("ape")
install.packages("deSolve")
install.packages("Rcpp")
library(diversitree)
diversitree
install.packages ("rgeos")
install.packages(rgdal)
install.packages(rgdal)
install.packages("rgdal")
install.packages("maptools")
install.packages(c("maps", "mapdata", "ggmap", "dismo", "raster", "rJava"))
#download bioclim variables.
# This tutorial was modified from an example produced by Jeremy Yoder, available on http://www.molecularecologist.com/2013/04/species-distribution-models-in-r/.
# Occurence data from Godsoe W, Strand E, Smith CI, Yoder JB, Esque TC, Pellmyr O (2009) Divergence in an obligate mutualism is not explained by divergent climatic factors. New Phytologist 183(3): 589â599. http://dx.doi.org/10.1111/j.1469-8137.2009.02942.x
# Occurence data available at http://datadryad.org/resource/doi:10.5061/dryad.6s67t
# loading required packages packages
require(ggmap) # package useful to make plots using background from Google, Open Street Map, etc.
require(maps) # package required to make some plots we will do today
require(dismo) # package that does the species distribution modeling
require(rgdal) # package required to load bioclim data
require(rJava) # package required to run maxent
require(rgeos) # package required to make some map data manipulations
######## PART 1 - LOADING OCURRENCE DATA ################
# load the table of latitude and longitude records for Joshua tree
locs = read.csv(file = "occurrence.txt", header=T, sep="\t")
names(locs)
######## PART 2 - BASIC DISTRIBUTION MAPS ################
# alternatives to mapping
# 1 - using a google background and package ggmap
# first, we need to calculate the center of our map
# to get a rough estimate, we will take the median value of longitude and latitude for all records
# we will use the function "apply" to apply he function "median" to the columns "longitude" and "latitude" in our table
map_center = apply(locs[c("decimalLongitude", "decimalLatitude")], 2, median)
# now that we have a center, we will download the map
# the function get_googlemap can be found in the package ggmap
# use ?get_googlemap to see what the parameters mean
# it is important to test different zoom levels, to make sure all the points fit in the map
google_background = get_googlemap(center = map_center, zoom = 4, maptype = "sat")
# now that we saved the google image, we can plot the map
# we will plot the map using ggmap() from package ggmap
# and we plot the points using geom_point() from package ggplot2 (automatically loaded with ggmap)
ggmap(google_background) + geom_point(aes(x = decimalLongitude, y = decimalLatitude), data = locs)
# 2 - Using package maps
# we can also use map data from other sources
# for example, state boundaries from the R package maps
# let's load the state boundaries
data(stateMapEnv)
# the following commands plot the state boundaries, between longitudes -119 and -113 and latitudes 33.5 and 38
plot(c(-119, -113), c(33.5, 38), mar=par("mar"), xlab="longitude", ylab="latitude", xaxt="n", yaxt="n", type="n", main="Joshua tree presence data")
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4], col="lightblue")
map("state", xlim=c(-119, -113), ylim=c(33.5, 38), fill=T, col="cornsilk", add=T)
# add some nice state labels ...
text(x=-117.5, y=35.5, "California", col="cornsilk3", cex=3)
text(x=-116, y=37.5, "Nevada", col="cornsilk3", cex=3)
text(x=-113, y=34.5, "Arizona", col="cornsilk3", cex=3)
text(x=-113, y=37.75, "Utah", col="cornsilk3", cex=3)
# plot the points
points(locs$longitude, locs$latitude, col="darkolivegreen4", pch=20, cex=0.5)
# add some axes
axis(1,las=1)
axis(2,las=1)
# and add the box around the map
box()
######## PART 3 - CLEANING DATA ################
# Problem: uneven sampling effort.
# The distribution of Joshua Trees is uneven for two reasons
# One, plants are really unevenly distributed
# Two, researchers put uneven spatial effort into collecting
# One way to deal with the later is to divide the area into a grid with small cell size
# and only keep one randomly selected record per cell.
# Let's do that
# We will use a grid with cell sizes of 0.05 of a degree
cell_size = 0.05
longrid = seq(-20,40,cell_size)
latgrid = seq(47,70,cell_size)
load("~/GitHub/eysterthesis/.RData")
pdf(file="heightbyspecies.pdf")
for(i in 1:length(species)){
a<-ggplot(subset(gh, sp==species[i]), aes(x=(mdaysfromgerm),y=plantheight, color=origin, group=trayloc))+
geom_line(size=.6, alpha=.2) +geom_point(position=pd, size=1.6, alpha=.2)+
geom_smooth(aes(group = origin), size = 1, method = "lm", se = FALSE, alpha=1)+
facet_grid(temp~strat)+
ylab("height (cm)")+
xlab("days since germination")+
ggtitle(paste(species[i], " height vs. days since germ  by color=continent, column=strat(days), row=temp(C)"))
print(a)
}
dev.off()
library(ggplot2)
library(nlme)
library(plyr)
library(reshape2)
library(Rmisc)
library(lme4)
library(scales)
pdf(file="heightbyspecies.pdf")
for(i in 1:length(species)){
a<-ggplot(subset(gh, sp==species[i]), aes(x=(mdaysfromgerm),y=plantheight, color=origin, group=trayloc))+
geom_line(size=.6, alpha=.2) +geom_point(position=pd, size=1.6, alpha=.2)+
geom_smooth(aes(group = origin), size = 1, method = "lm", se = FALSE, alpha=1)+
facet_grid(temp~strat)+
ylab("height (cm)")+
xlab("days since germination")+
ggtitle(paste(species[i], " height vs. days since germ  by color=continent, column=strat(days), row=temp(C)"))
print(a)
}
dev.off()
pdf(file="heightbyspecies.pdf")
pdf(file="heightbyspecies.pdf")
for(i in 1:length(species)){
a<-ggplot(subset(gh, sp==species[i]), aes(x=(mdaysfromgerm),y=plantheight, color=origin, group=trayloc))+
geom_line(size=.6, alpha=.2) +geom_point(position=pd, size=1.6, alpha=.2)+
geom_smooth(aes(group = origin), size = 1, method = "lm", se = FALSE, alpha=1)+
facet_grid(temp~strat)+
ylab("height (cm)")+
xlab("days since germination")+
ggtitle(paste(species[i], " height vs. days since germ  by color=continent, column=strat(days), row=temp(C)"))
ggsave("heightbyspecies.pdf")
}
dev.off()
dev.off()
unlink(heightbyspecies.pdf)
unlink("heightbyspecies.pdf")
pdf(file="heightbyspecies.pdf")
plot4a<-ggplot(subset(gh, sp=="DACGLO"), aes(x=(mdaysfromgerm),y=plantheight, color=origin, group=trayloc))+
geom_line(size=.6, alpha=.2) +geom_point(position=pd, size=1.6, alpha=.2)+
geom_smooth(aes(group = origin), size = 1, method = "lm", se = FALSE, alpha=1)+
#geom_line(aes(y=mean(group)), size = 1, method = "lm", se = FALSE, alpha=1)+
facet_grid(temp~strat)+
ylab("height (cm)")+
xlab("mdaysfromgerm")+
ggtitle("DACGLO height vs. days since germ  by color=continent, column=strat(days), row=temp(C)")
ggsave("heightbyspecies.pdf")
ggsave("heightbyspecies.pdf", plot=(a))
pdf(file="heightbyspecies.pdf")
for(i in 1:length(species)){
a<-ggplot(subset(gh, sp==species[i]), aes(x=(mdaysfromgerm),y=plantheight, color=origin, group=trayloc))+
geom_line(size=.6, alpha=.2) +geom_point(position=pd, size=1.6, alpha=.2)+
geom_smooth(aes(group = origin), size = 1, method = "lm", se = FALSE, alpha=1)+
facet_grid(temp~strat)+
ylab("height (cm)")+
xlab("days since germination")+
ggtitle(paste(species[i], " height vs. days since germ  by color=continent, column=strat(days), row=temp(C)"))
print(a)
ggsave("heightbyspecies.pdf", plot=(a))
}
dev.off()
dev.off()
setwd("C:/Users/Harold/Documents/github/eysterthesis")
## load libraries
library(ggplot2)
library(nlme)
library(plyr)
library(reshape2)
library(Rmisc)
library(lme4)
library(scales)
pdf(file="heightbyspecies.pdf")
for(i in 1:length(species)){
a<-ggplot(subset(gh, sp==species[i]), aes(x=(mdaysfromgerm),y=plantheight, color=origin, group=trayloc))+
geom_line(size=.6, alpha=.2) +geom_point(position=pd, size=1.6, alpha=.2)+
geom_smooth(aes(group = origin), size = 1, method = "lm", se = FALSE, alpha=1)+
facet_grid(temp~strat)+
ylab("height (cm)")+
xlab("days since germination")+
ggtitle(paste(species[i], " height vs. days since germ  by color=continent, column=strat(days), row=temp(C)"))
ggsave("heightbyspecies.pdf")
}
dev.off()
