setwd("~/git/isotria/analyses")
setwd("~/git/isotria/analyses")
isoinds<-read.csv("Isotria_Stage4_2016.csv", header=T)#
head(isoinds)
isoinds<-isoinds[isoinds$Year<2016,]#remove data from 2016 as it was incomplete i think.
dim(isoinds)#32559    18
inds<-unique(isodat$UniqueID)#2473 plants
#get fates of each plant
#get fates of each plant
present = isoinds[isoinds$Year < 2015& isoinds$Year >1983, ]; present = present[order(present$UniqueID),]; present = present[order(present$Year),]
dim(present)# 31837 rows, 18 columns
future = isoinds[isoinds$Year > 1984, ]; future = future[order(future$UniqueID),]; future = future[order(future$Year),]
dim(future)#31752 rows, 18 columns
head(present);head(future)
colnames(future)
future$YearFate=future$Year-1
#Merge present and future to get fates
isofate<-merge(present,future,by.x=c("UniqueID","Year","Group",  "Block", "Plant","YearFound"),by.y=c("UniqueID","YearFate","Group",  "Block", "Plant","YearFound"),all = TRUE)#this includes all plants, without matches in past/future, as well
isofate2<-merge(present,future,by.x=c("UniqueID","Year","Group",  "Block", "Plant","YearFound"),by.y=c("UniqueID","YearFate","Group",  "Block", "Plant","YearFound"))#this only includes plants for which there is fate data that matches
dim(isofate);dim(isofate2)
head(isofate2)
colnames(isofate)
isofate=isofate[,-19]#remove year column
isofate2=isofate2[,-19]
#add column names
colnames(isofate)=c("UniqueID","Year", "Group",  "Block", "Plant",  "YearFound","NoVegStems","NoArrStems","NoFlStems","NoFrStems","TotNoStems","Height","Width","Stage","Stage2","Stage3","Emerg","Stage4","FutNoVegStems","FutNoArrStems","FutNoFlStems","FutNoFrStems","FutTotNoStems","FutHeight","FutWidth","Fate","Fate2","Fate3","FutEmerg","Fate4")
colnames(isofate2)=c("UniqueID","Year", "Group",  "Block", "Plant",  "YearFound","NoVegStems","NoArrStems","NoFlStems","NoFrStems","TotNoStems","Height","Width","Stage","Stage2","Stage3","Emerg","Stage4","FutNoVegStems","FutNoArrStems","FutNoFlStems","FutNoFrStems","FutTotNoStems","FutHeight","FutWidth","Fate","Fate2","Fate3","FutEmerg","Fate4")
head(isofate); head(isofate2)
#I think I will mostly use isofate2, which only includes matches, so stick with that one for rest of formatting
###Now add stage before dormancy to isofate2 dataset.
past = isoinds[isoinds$Year < 2015,]; past = past[order(past$UniqueID),]; past = past[order(past$Year),]
dim(past)# 30942 (present=30644 rows)
dim(present)# 30942 (present=30644 rows)
dim(past)# 32135 (present=31837 rows)
past$YearPrev=past$Year+1
#Merge present and past to get fates
isofate2prev<-merge(isofate2,past,by.x=c("UniqueID","Year","Group",  "Block", "Plant","YearFound"),by.y=c("UniqueID","YearPrev","Group",  "Block", "Plant","YearFound"),all = TRUE)#this includes all plants, without matches in past, as well
head(isofate2)
head(isofate2prev); dim(isofate2prev)
colnames(isofate2prev)
isofate3prev<-subset(isofate2prev,select=c("UniqueID","Year","Group","Block","Plant","YearFound","NoVegStems.x","NoArrStems.x","NoFlStems.x","NoFrStems.x","TotNoStems.x","Height.x","Width","Emerg.x","Stage4.x","FutNoVegStems","FutNoArrStems","FutEmerg","Fate4"))
head(isofate3prev)
isofate3prev<-subset(isofate2prev,select=c("UniqueID","Year","Group","Block","Plant","YearFound","NoVegStems.x","NoArrStems.x","NoFlStems.x","NoFrStems.x","TotNoStems.x","Height.x","Width","Emerg.x","Stage4.x","FutEmerg","Fate4"))
head(isofate3prev)
isofate3prev<-subset(isofate2prev,select=c("UniqueID","Year","Group","Block","Plant","YearFound","NoVegStems.x","NoArrStems.x","NoFlStems.x","NoFrStems.x","TotNoStems.x","Height.x","Width","Emerg.x","Stage4.x","FutEmerg","Fate4","Emerg.y","Stage4.y"))
colnames(isofate2prev)=c("UniqueID","Year", "Group",  "Block", "Plant",  "YearFound","NoVegStems","NoArrStems","NoFlStems","NoFrStems","TotNoStems","Height","Width","Emerg","Stage","FutNoFrStems","FutTotNoStems","FutHeight","FutWidth","Fate","Fate2","Fate3","Fate4", "FutEmerg","PrevEmerg","PrevYrStage4")
colnames(isofate3prev)=c("UniqueID","Year", "Group",  "Block", "Plant",  "YearFound","NoVegStems","NoArrStems","NoFlStems","NoFrStems","TotNoStems","Height","Width","Emerg","Stage","FutNoFrStems","FutTotNoStems","FutHeight","FutWidth","Fate","Fate2","Fate3","Fate4", "FutEmerg","PrevEmerg","PrevYrStage4")
isofate3prev<-subset(isofate2prev,select=c("UniqueID","Year","Group","Block","Plant","YearFound","NoVegStems.x","NoArrStems.x","NoFlStems.x","NoFrStems.x","TotNoStems.x","Height.x","Width","Emerg.x","Stage4.x","FutEmerg","Fate4","Emerg.y","Stage4.y"))
isofate2prev<-merge(isofate2,past,by.x=c("UniqueID","Year","Group",  "Block", "Plant","YearFound"),by.y=c("UniqueID","YearPrev","Group",  "Block", "Plant","YearFound"),all = TRUE)#this includes all plants, without matches in past, as well
isofate2<-merge(present,future,by.x=c("UniqueID","Year","Group",  "Block", "Plant","YearFound"),by.y=c("UniqueID","YearFate","Group",  "Block", "Plant","YearFound"))#this only includes plants for which there is fate data that matches
dim(isofate);dim(isofate2)
head(isofate2)
colnames(isofate)
isofate=isofate[,-19]#remove year column
isofate2=isofate2[,-19]
#add column names
colnames(isofate)=c("UniqueID","Year", "Group",  "Block", "Plant",  "YearFound","NoVegStems","NoArrStems","NoFlStems","NoFrStems","TotNoStems","Height","Width","Stage","Stage2","Stage3","Emerg","Stage4","FutNoVegStems","FutNoArrStems","FutNoFlStems","FutNoFrStems","FutTotNoStems","FutHeight","FutWidth","Fate","Fate2","Fate3","FutEmerg","Fate4")
present = isoinds[isoinds$Year < 2015& isoinds$Year >1983, ]; present = present[order(present$UniqueID),]; present = present[order(present$Year),]
dim(present)# 31837 rows, 18 columns
future = isoinds[isoinds$Year > 1984, ]; future = future[order(future$UniqueID),]; future = future[order(future$Year),]
dim(future)#31752 rows, 18 columns
head(present);head(future)
colnames(future)
future$YearFate=future$Year-1
#Merge present and future to get fates
isofate<-merge(present,future,by.x=c("UniqueID","Year","Group",  "Block", "Plant","YearFound"),by.y=c("UniqueID","YearFate","Group",  "Block", "Plant","YearFound"),all = TRUE)#this includes all plants, without matches in past/future, as well
isofate2<-merge(present,future,by.x=c("UniqueID","Year","Group",  "Block", "Plant","YearFound"),by.y=c("UniqueID","YearFate","Group",  "Block", "Plant","YearFound"))#this only includes plants for which there is fate data that matches
dim(isofate);dim(isofate2)
head(isofate2)
colnames(isofate)
isofate=isofate[,-19]#remove year column
isofate2=isofate2[,-19]
#add column names
colnames(isofate)=c("UniqueID","Year", "Group",  "Block", "Plant",  "YearFound","NoVegStems","NoArrStems","NoFlStems","NoFrStems","TotNoStems","Height","Width","Stage","Stage2","Stage3","Emerg","Stage4","FutNoVegStems","FutNoArrStems","FutNoFlStems","FutNoFrStems","FutTotNoStems","FutHeight","FutWidth","Fate","Fate2","Fate3","FutEmerg","Fate4")
colnames(isofate2)=c("UniqueID","Year", "Group",  "Block", "Plant",  "YearFound","NoVegStems","NoArrStems","NoFlStems","NoFrStems","TotNoStems","Height","Width","Stage","Stage2","Stage3","Emerg","Stage4","FutNoVegStems","FutNoArrStems","FutNoFlStems","FutNoFrStems","FutTotNoStems","FutHeight","FutWidth","Fate","Fate2","Fate3","FutEmerg","Fate4")
head(isofate); head(isofate2)
#I think I will mostly use isofate2, which only includes matches, so stick with that one for rest of formatting
###Now add stage before dormancy to isofate2 dataset.
past = isoinds[isoinds$Year < 2015,]; past = past[order(past$UniqueID),]; past = past[order(past$Year),]
dim(past)# 32135 (present=31837 rows)
past$YearPrev=past$Year+1
#Merge present and past to get fates
isofate2prev<-merge(isofate2,past,by.x=c("UniqueID","Year","Group",  "Block", "Plant","YearFound"),by.y=c("UniqueID","YearPrev","Group",  "Block", "Plant","YearFound"),all = TRUE)#this includes all plants, without matches in past, as well
head(isofate2)
head(isofate2prev); dim(isofate2prev)
#delete unncessary columns (we only want stage)
dim(isofate2prev)
head(isofate2prev)
isofate3prev<-subset(isofate2prev,select=c("UniqueID","Year","Group","Block","Plant","YearFound","NoVegStems.x","NoArrStems.x","NoFlStems.x","NoFrStems.x","TotNoStems.x","Height.x","Width","Emerg.x","Stage4.x","FutEmerg","Fate4","Emerg.y","Stage4.y"))
colnames(isofate3prev)=c("UniqueID","Year", "Group",  "Block", "Plant",  "YearFound","NoVegStems","NoArrStems","NoFlStems","NoFrStems","TotNoStems","Height","Width","Emerg","Stage","FutEmerg","Fate","PrevEmerg","PrevYrStage4")
head(isofate3prev)
isofate3prev[which(isofate3prev$PrevYrStage4=="VegSm" & isofate2prev$Stage4=="D"),]$Stage4="DSV"
head(isofate3prev)
isofate3prev[which(isofate3prev$PrevYrStage4=="VegSm" & isofate2prev$Stage=="D"),]$Stage="DSV"
colnames(isofate3prev)=c("UniqueID","Year", "Group",  "Block", "Plant",  "YearFound","NoVegStems","NoArrStems","NoFlStems","NoFrStems","TotNoStems","Height","Width","Emerg","Stage","FutEmerg","Fate","PrevEmerg","PrevYrStage")
head(isofate3prev[which(isofate3prev$PrevYrStage=="VegSm"),])
unique(isofate3prev$Stage)
isofate3prev[which(isofate3prev$PrevYrStage=="VegSm" & isofate3prev$Stage=="D"),]$Stage="DSV"
head(isofate3prev[which(isofate3prev$PrevYrStage=="VegSm"),])
head(isofate3prev)
isofate2prev[which(isofate2prev$Stage2=="VegSm" & isofate2prev$Fate3=="D"),]$Fate3="DSV"
isofate3prev[which(isofate3prev$Stage=="VegSm" & isofate3prev$Fate=="D"),]$Fate="DSV"
head(isofate3prev)
tail(isofate3prev)
unique(isofate3prev$Stage)
isofate3prev$Stage.D<-NA
isofate3prev[which(isofate3prev$PrevYrStage=="VegSm" & isofate3prev$Stage=="D"),]$Stage.D="DSV"
unique(isofate3prev$Stage)
head(isofate3prev[which(isofate3prev$Stage=="D"),])
isofate3prev[which(isofate3prev$PrevYrStage=="VegSm" & isofate3prev$Stage=="D"),]$Stage.D="DSV"
head(isofate3prev[which(isofate3prev$PrevYrStage=="VegSm",])
head(isofate3prev[which(isofate3prev$PrevYrStage=="VegSm"),])
unique(isofate3prev[which(isofate3prev$PrevYrStage=="VegSm"),]$Fate)
x<-isofate3prev[which(isofate3prev$PrevYrStage=="VegSm"),]
head(x[which(x$Stage=="D"),])
past = isoinds[isoinds$Year < 2016,]; past = past[order(past$UniqueID),]; past = past[order(past$Year),]
dim(past)# 32135 (present=31837 rows)
past$YearPrev=past$Year+1
#Merge present and past to get fates
isofate2prev<-merge(isofate2,past,by.x=c("UniqueID","Year","Group",  "Block", "Plant","YearFound"),by.y=c("UniqueID","YearPrev","Group",  "Block", "Plant","YearFound"),all = TRUE)#this includes all plants, without matches in past, as well
head(isofate2)
head(isofate2prev); dim(isofate2prev)
#delete unncessary columns (we only want stage)
dim(isofate2prev)
isofate3prev<-subset(isofate2prev,select=c("UniqueID","Year","Group","Block","Plant","YearFound","NoVegStems.x","NoArrStems.x","NoFlStems.x","NoFrStems.x","TotNoStems.x","Height.x","Width","Emerg.x","Stage4.x","FutEmerg","Fate4","Emerg.y","Stage4.y"))
colnames(isofate3prev)=c("UniqueID","Year", "Group",  "Block", "Plant",  "YearFound","NoVegStems","NoArrStems","NoFlStems","NoFrStems","TotNoStems","Height","Width","Emerg","Stage","FutEmerg","Fate","PrevEmerg","PrevYrStage")
#We will use Stage3 and Fate3 for now, so I am going to divide class "D" into 2 classes- SmvegbeforeD (DSV) and everything else (D)
isofate3prev$Stage.D<-NA
isofate3prev[which(isofate3prev$PrevYrStage=="VegSm" & isofate3prev$Stage=="D"),]$Stage.D="DSV"
unique(isofate3prev$Stage)
unique(isofate3prev$Stage.D)
isofate3prev[which(!isofate3prev$PrevYrStage=="VegSm" & isofate3prev$Stage=="D"),]$Stage.D="D"
unique(isofate3prev$Stage.D)
isofate3prev<-subset(isofate2prev,select=c("UniqueID","Year","Group","Block","Plant","YearFound","NoVegStems.x","NoArrStems.x","NoFlStems.x","NoFrStems.x","TotNoStems.x","Height.x","Width","Emerg.x","Stage4.x","FutEmerg","Fate4","Emerg.y","Stage4.y"))
colnames(isofate3prev)=c("UniqueID","Year", "Group",  "Block", "Plant",  "YearFound","NoVegStems","NoArrStems","NoFlStems","NoFrStems","TotNoStems","Height","Width","Emerg","Stage","FutEmerg","Fate","PrevEmerg","PrevYrStage")
#We will use Stage3 and Fate3 for now, so I am going to divide class "D" into 2 classes- SmvegbeforeD (DSV) and everything else (D)
isofate3prev$Stage.D<-NA
isofate3prev[which(isofate3prev$PrevYrStage=="VegSm" & isofate3prev$Stage=="D"),]$Stage="DSV"
isofate2prev<-merge(isofate2,past,by.x=c("UniqueID","Year","Group",  "Block", "Plant","YearFound"),by.y=c("UniqueID","YearPrev","Group",  "Block", "Plant","YearFound"),all = TRUE)#this includes all plants, without matches in past, as well
head(isofate2)
head(isofate2prev); dim(isofate2prev)
#delete unncessary columns (we only want stage)
dim(isofate2prev)
isofate3prev<-subset(isofate2prev,select=c("UniqueID","Year","Group","Block","Plant","YearFound","NoVegStems.x","NoArrStems.x","NoFlStems.x","NoFrStems.x","TotNoStems.x","Height.x","Width","Emerg.x","Stage4.x","FutEmerg","Fate4","Emerg.y","Stage4.y"))
colnames(isofate3prev)=c("UniqueID","Year", "Group",  "Block", "Plant",  "YearFound","NoVegStems","NoArrStems","NoFlStems","NoFrStems","TotNoStems","Height","Width","Emerg","Stage","FutEmerg","Fate","PrevEmerg","PrevYrStage")
#We will use Stage3 and Fate3 for now, so I am going to divide class "D" into 2 classes- SmvegbeforeD (DSV) and everything else (D)
isofate3prev$Stage.D<-NA
isofate3prev[which(isofate3prev$PrevYrStage=="VegSm" & isofate3prev$Stage=="D"),]$Stage.D="DSV"
isofate3prev[which(!isofate3prev$PrevYrStage=="VegSm" & isofate3prev$Stage=="D"),]$Stage.D="D"
unique(isofate3prev$Stage.D)
#need to add DSV to fate tooƒ
isofate3prev[which(isofate3prev$Stage=="VegSm" & isofate3prev$Fate=="D"),]$Fate="DSV"
unique(isofate3prev$Stage.D)
head(isofate3prev)
isofate3prev[which(isofate3prev$Stage=="VegSm" & isofate3prev$Fate=="D"),]$Fate<-"DSV"
isofate3prev[which(isofate3prev$PrevYrStage=="VegSm" & isofate3prev$Stage=="D"),]$Stage.D<-"DSV"
isofate3prev[which(!isofate3prev$PrevYrStage=="VegSm" & isofate3prev$Stage=="D"),]$Stage.D<-"D"
head(isofate3prev[which(isofate3pre$stage==D),]
)
head(isofate3prev[which(isofate3prev$stage==D),])
head(isofate3prev[which(isofate3pre$Stage==D),]
)
head(isofate3prev[which(isofate3prev$Stage==D),])
head(isofate3prev[which(isofate3prev$Stage=="D"),])
head(isofate3prev[which(isofate3prev$Stage=="D"),])
head(isofate3prev[which(isofate3prev$Stage=="DSV"),])
head(isofate3prev[which(isofate3prev$Stage.D=="DSV"),])
#observed emergence
numsdsalive<-tapply(isofate3prev$FutEmerg,isofate3prev$Stage, sum)
numsds<-tapply(isofate3prev$FutEmerg,isofate3prev$Stage, length)
propemerg<-numsdsalive/numsds
propemerg#
isofate3prev$Stage<-as.factor(isofate3prev$Stage)
emerg.mod <- lmer(FutEmerg ~ -1 +Stage + (-1+Stage|Year), data=isofate3prev, family=binomial(link=logit))#change name to emerg.mod
library(lme4)
setwd("~/git/isotria/analyses")
rm(list=ls())
options(stringsAsFactors=FALSE)
library(rjags)
library(jagsUI)
library(lattice)
library(coda)
library(boot)
#update.packages()
isoinds<-read.csv("Isotria_Stage3_2016.csv", header=T)#
getwd()
test<-"../ospree/analyses/ospree.csv"
head(Test)
head(rest)
head(test)
test<-read.csv("../ospree/analyses/ospree.csv")
test<-read.csv(".../ospree/analyses/ospree.csv")
test<-read.csv(".../ospree/analyses/input/ospree.csv")
test<-read.csv("../ospree/analyses/input/ospree.csv")
test<-read.csv("~../ospree/analyses/input/ospree.csv")
getwd()
test<-read.csv("./data/LakeportClim.csv")
test<-read.csv("../data/LakeportClim.csv")
head(test)
test<-read.csv("../data/LakeportClim.csv")
getwd()
test<-read.csv("...../obsclim.csv")
test<-read.csv(".....obsclim.csv")
test<-read.csv("......obsclim.csv")
test<-read.csv(".......obsclim.csv")
test<-read.csv(".......obsclim.csv")
getwd()
rm(list=ls())
options(stringsAsFactors=FALSE)
library(ncdf4)
library(dplyr)
library(Interpol.T)
library(chillR)
setwd("~/Documents/git/ospree")
getwd()
setwd("~/git/ospree")
dat <- read.csv("ospree_clean.csv")
dat <- read.csv("analyses/output/ospree_clean.csv")
#use only woody species
dat2 <- subset(dat, woody=="yes")
#Make a column that indexes the study and field sample date, in order to calculate field chilling
#Make a column that indexes the study, provenance latitude,provenance longitude, and field sample date, in order to calculate field chilling
dat2$ID_fieldsample.date<-paste(dat2$datasetID,dat2$provenance.lat,dat2$provenance.long,d$fieldsample.date, sep=".")
dat2$ID_fieldsample.date<-paste(dat2$datasetID,dat2$provenance.lat,dat2$provenance.long,dat2$fieldsample.date, sep=".")
dat2$ID_chilltreat<-paste(dat2$datasetID,dat2$chilltemp,dat2$chilldays,sep=".")
##### Calculate experimental chilling, using chillday and chilltemp.
###there are many non-numeric values in the chilltemp and chilldays columns- these are unusable currently so remove:
#want table with datasetID chilling days, chilling temperature,  treat for each study.
chilldat <- dat2 %>% # start with the data frame
distinct(ID_chilltreat,.keep_all = TRUE) %>% # establishing grouping variables
select(datasetID, chilltemp, chilldays, year,ID_chilltreat)
chilldat$chilltemp<-as.numeric(chilldat$chilltemp)
chilldat$chilldays<-as.numeric(chilldat$chilldays)
chilldat<- chilldat[apply(chilldat, 1, function(x) all(!is.na(x))),] # only keep rows of all not na
expchillcalcs <- vector()
###First, need file with hrly temperature data for each row in dataframe
for(i in 1:nrow(chilldat)) {
# Skip if NA for chilltemp or chilldays data
if(!is.na(chilldat$chilltemp[i]) & chilldat$chilldays[i] !=0 & !is.na(chilldat$chilldays[i])) {
yr <- as.numeric(chilldat$year[i])
if(is.na(yr)){ yr <- 2016} #temporary fix for when years are not currently listed!
hrly =
data.frame(
Temp = rep(as.numeric(chilldat$chilltemp[i]),
times = 24 * round(as.numeric(chilldat$chilldays[i], digits=0))),
Year = rep(yr,
times = 24 * round(as.numeric(chilldat$chilldays[i],digits=0))),
JDay = sort(rep(as.numeric(seq(1:round(as.numeric(chilldat$chilldays[i], digits=0)))), times = 24))
)
expchillcalc <- chilling(hrly, hrly$JDay[1], hrly$JDay[nrow(hrly)])
} else { expchillcalc <- data.frame("Chilling_Hours"=NA, "Utah_Model"=NA, "Chill_portions"=NA) }
expchillcalcs <- rbind(expchillcalcs,
data.frame(datasetID = chilldat$datasetID[i],
ID_chilltreat = chilldat$ID_chilltreat[i],
expchillcalc[c("Chilling_Hours","Utah_Model","Chill_portions")]))
}
colnames(expchillcalcs)[3:5] <- c("Exp_Chilling_Hours","Exp_Utah_Model","Exp_Chill_portions")
dim(dat2)
dim(dat)
dat3 <- merge(dat2, expchillcalcs,
by.x = c("datasetID","ID_chilltreat"),
by.y=c("datasetID","ID_chilltreat"),
all.x=T)
dim(dat3)
getwd()
chillcalcs <- read.csv("input/fieldchillcalcslatlong.csv", header=T)
chillcalcs <- read.csv("analyses/input/fieldchillcalcslatlong.csv", header=T)
dim(chillcalcs)
chillcalcs <- chillcalcs[apply(chillcalcs, 1, function(x) all(!is.na(x))),] # only keep rows of all not NA. 192 rows now.
dim(chillcalcs)
head(chillcalcs)
colnames(chillcalcs) <- c("ID_fieldsample.date","Field_Chilling_Hours","Field_Utah_Model","Field_Chill_portions")
(todrop <- chillcalcs$ID_fieldsample.date[!chillcalcs$ID_fieldsample.date %in% dat3$ID_fieldsample.date])
(nochillcalcs <- unique(dat3$ID_fieldsample.date[!dat3$ID_fieldsample.date %in% chillcalcs$ID_fieldsample.date]))
(todrop <- chillcalcs$ID_fieldsample.date[!chillcalcs$ID_fieldsample.date %in% dat3$ID_fieldsample.date])
chillcalcs <- chillcalcs[chillcalcs$ID_fieldsample.date %in% dat3$ID_fieldsample.date,]
dim(chillcalcs)
(nochillcalcs <- unique(dat3$ID_fieldsample.date[!dat3$ID_fieldsample.date %in% chillcalcs$ID_fieldsample.date]))
dat4 <- data.frame(dat3, chillcalcs[match(dat3$ID_fieldsample.date, chillcalcs$ID_fieldsample.date),])
dim(dat4)
dat4 <- merge(dat3, chillcalcs,
by = "ID_fieldsample.date",
all.x = TRUE
)
dim(dat4)
12533-11984
dat4 <- data.frame(dat3, chillcalcs[match(dat3$ID_fieldsample.date, chillcalcs$ID_fieldsample.date),])
### Now add column for total chilling (field plus experimental)
### First, total chilling = exp and field
dat4$Total_Chilling_Hours <- dat4$Exp_Chilling_Hours+dat4$Field_Chilling_Hours
dat4$Total_Utah_Model <- dat4$Exp_Utah_Model+dat4$Field_Utah_Model
dat4$Total_Chill_portions <- dat4$Exp_Chill_portions+dat4$Field_Chill_portions
#For sites with no experimental chilling, just use field chilling:
dat4[which(is.na(dat4$Exp_Chilling_Hours)),]$Total_Chilling_Hours<-dat4[which(is.na(dat4$Exp_Chilling_Hours)),]$Field_Chilling_Hours
dat4[which(is.na(dat4$Exp_Utah_Model)),]$Total_Utah_Model<-dat4[which(is.na(dat4$Exp_Utah_Model)),]$Field_Utah_Model
dat4[which(is.na(dat4$Exp_Chill_portions)),]$Total_Chill_portions<-dat4[which(is.na(dat4$Exp_Chill_portions)),]$Field_Chill_portions
#For sites with no field chilling, should we use only experimental chilling? not sure if this is ok...
dat4[which(is.na(dat4$Field_Chilling_Hours)),]$Total_Chilling_Hours<-dat4[which(is.na(dat4$Field_Chilling_Hours)),]$Exp_Chilling_Hours
dat4[which(is.na(dat4$Field_Utah_Model)),]$Total_Utah_Model<-dat4[which(is.na(dat4$Field_Utah_Model)),]$Exp_Utah_Model
dat4[which(is.na(dat4$Field_Chill_portions)),]$Total_Chill_portions<-dat4[which(is.na(dat4$Field_Chill_portions)),]$Exp_Chill_portions
write.csv(dat4,"output/ospree_clean_withchill.csv",row.names=FALSE, eol="\r\n")
head(dat4)
tail(dat4)
dat4 <- merge(dat3, chillcalcs,
by = "ID_fieldsample.date",
all.x = TRUE
)
tail(dat)
tail(dat4)
dat4<-join(dat3, chillcalcs,,by="ID_fieldsample.date",type="full",match="all")
library(plyr)
dat4<-join(dat3, chillcalcs,,by="ID_fieldsample.date",type="full",match="all")
dat4<-join(dat3, chillcalcs,by="ID_fieldsample.date",type="full",match="all")
dim(dat4)
dim(dat3)
12533-11984
dat4<-join(dat3, chillcalcs,by="ID_fieldsample.date",type="full",match="all")
# Merge manually
dat4a <- data.frame(dat3, chillcalcs[match(dat3$ID_fieldsample.date, chillcalcs$ID_fieldsample.date),])
extras <- dat4[dat4$ID_fieldsample.date %in% dat3$ID_fieldsample.date,]
extras
dim(extras)
extras <- dat4[dat4$ID_fieldsample.date %in% dat4a$ID_fieldsample.date,]
dim(extras)
extras <- dat4a[dat4a$ID_fieldsample.date %in% dat4$ID_fieldsample.date,]
dim(extras)
extras <- unique(dat4$ID_fieldsample.date[!dat4$ID_fieldsample.date %in% dat4$ID_fieldsample.date]))
extras <- unique(dat4$ID_fieldsample.date[!dat4$ID_fieldsample.date %in% dat4$ID_fieldsample.date])
dim(extras)
extras <- unique(dat4$ID_fieldsample.date[!dat4$ID_fieldsample.date %in% dat4$ID_fieldsample.date])
extras
extras <- unique(dat4$ID_fieldsample.date[!dat4$ID_fieldsample.date %in% dat4a$ID_fieldsample.date])
extras
dim(dat4)
dim(dat4a)
extras <- unique(dat4a$ID_fieldsample.date[!dat4a$ID_fieldsample.date %in% dat4$ID_fieldsample.date])
extras
unique(dat4a$ID_fieldsample.date
)
unique(dat4$ID_fieldsample.date)
dat4<-join(dat3, chillcalcs,by="ID_fieldsample.date",type="full",match="all")
unique(dat4$ID_fieldsample.date)
